{
    "docs": [
        {
            "location": "/", 
            "text": "Ricoh THETA V Plugin Application Development - Community Guide\n\n\n\n\nBy \nCraig Oda and Jesse Casman\n of \nOppkey\n\n\n\n\nInternal Note: This guide is being updated and will be published to be timed with the launch of the THETA Store.\n\n\n\n\nThis is a compilation of community experiences and tests from members of \ntheta360.guide\n, an\nindependent developer community for RICOH THETA cameras.  The \ncommunity-created\n document you are reading may contain factual errors. Please help the community to\nupdate this document using pull requests on \nGitHub\n.\n\n\nOfficial Ricoh Information\n\n\n\n\nPlug-in SDK\n\n\nPlug-in API\n\n\n\n\nTHETA V Plugin Application Development Overview\n\n\nThe THETA V uses Android as the operating system. Because of this, the THETA V application development process is the same as the development process for an Android phone. Connect the THETA V to a development workstation, either Mac, Windows, or Linux with a micro USB cable and connect to the camera with adb. You will need a THETA V\nthat is in developer mode. To put your THETA V into developer mode, please\n\njoin the RICOH THETA Plug-in Partner Program\n.\n\n\nThis document covers the following development process and tips:\n\n\n\n\nResources and Setup:\n\n\nRequirements\n\n\nCamera Hardware\n\n\nSetup\n\n\n\n\n\n\nDevelopment Workflow:\n\n\nPlugin Use\n\n\nUsing WiFi API\n\n\nCustom Development Tips\n\n\nPlugin Configuration\n\n\nWorkflow Tips\n\n\nVysor Tips\n\n\nTroubleshooting\n\n\n\n\n\n\nTutorials:\n\n\nTutorials Overview\n\n\nTutorial - Vysor\n\n\nTutorial - LED Color\n\n\nTutorial - LED Communication\n\n\nTutorial - Camera Buttons\n\n\nTutorial - Dual Fisheye\n\n\n\n\n\n\nCommunity Resources:\n\n\nFun Tests\n\n\nConcept Ideas\n\n\nCommunity\n\n\nAbout", 
            "title": "Overview"
        }, 
        {
            "location": "/#ricoh-theta-v-plugin-application-development-community-guide", 
            "text": "By  Craig Oda and Jesse Casman  of  Oppkey   Internal Note: This guide is being updated and will be published to be timed with the launch of the THETA Store.   This is a compilation of community experiences and tests from members of  theta360.guide , an\nindependent developer community for RICOH THETA cameras.  The  community-created  document you are reading may contain factual errors. Please help the community to\nupdate this document using pull requests on  GitHub .", 
            "title": "Ricoh THETA V Plugin Application Development - Community Guide"
        }, 
        {
            "location": "/#official-ricoh-information", 
            "text": "Plug-in SDK  Plug-in API", 
            "title": "Official Ricoh Information"
        }, 
        {
            "location": "/#theta-v-plugin-application-development-overview", 
            "text": "The THETA V uses Android as the operating system. Because of this, the THETA V application development process is the same as the development process for an Android phone. Connect the THETA V to a development workstation, either Mac, Windows, or Linux with a micro USB cable and connect to the camera with adb. You will need a THETA V\nthat is in developer mode. To put your THETA V into developer mode, please join the RICOH THETA Plug-in Partner Program .  This document covers the following development process and tips:   Resources and Setup:  Requirements  Camera Hardware  Setup    Development Workflow:  Plugin Use  Using WiFi API  Custom Development Tips  Plugin Configuration  Workflow Tips  Vysor Tips  Troubleshooting    Tutorials:  Tutorials Overview  Tutorial - Vysor  Tutorial - LED Color  Tutorial - LED Communication  Tutorial - Camera Buttons  Tutorial - Dual Fisheye    Community Resources:  Fun Tests  Concept Ideas  Community  About", 
            "title": "THETA V Plugin Application Development Overview"
        }, 
        {
            "location": "/requirements/", 
            "text": "Requirements for Development\n\n\nRequired Hardware\n\n\n\n\nThe SDK was tested with a RICOH THETA V under the following conditions:\n\n\nCamera\n\n\nHardware\n\n\nRICOH THETA V\n\n\nFirmware\n\n\nver.2.30.1 and above\n\n\nInformation on checking and updating the firmware is \nhere\n\n\n\n\n\n\nThe camera must be unlocked in Developer Mode. Join the \n\nRICOH THETA Plug-in Partner Program\n for information\non unlocking your camera.\n\n\n\n\n\n\n\n\nProcess to Unlock\n\n\nOnce you sign up for the partner program, you can use the free Ricoh Desktop\napplication version 3.5 or above to put the camera into Developer Mode using\na USB cable.\n\n\n\n\nSoftware for Development\n\n\n\n\nDevelopment Environment\n\n\nWindows 10 Version 1709\n\n\nIn Windows 7, adb connection does not work with USB\n\n\n\n\n\n\nmacOS High Sierra ver 10.13\n\n\n\n\n\n\nDevelopment - Build environment\n\n\nAndroid Studio 3.0+\n\n\nGradle 3.0.1\n\n\nAndroid SDK (API Level 25)\n\n\ncompileSdkVersion 26\n\n\nbuildToolsVersion \"26.0.3\"\n\n\nminSdkVersion 25\n\n\ntargetSdkVersion 25\n\n\n\n\n\n\n\n\nTHETA Plugin Technology Components\n\n\n\n\n\n\nPhotography\uff08images/video\uff09    \n\n\n\n\nCamera API\n\n\nAudioManager API\n\n\nWebAPI\n\n\n\n\n\n\n\n\nSensors  \n\n\n\n\nGyroscope (3-axis)\n\n\nAccelerometer (3-axis)\n\n\nMagnetometer (3-axis)\n\n\n\n\n\n\n\n\nUI Elements\n\n\n\n\nButtons\n\n\nMicrophones\n\n\nLEDs\n\n\nSpeakers\n\n\n\n\n\n\n\n\nUSB    \n\n\n\n\nDevice\n\n\nHost\n\n\n\n\n\n\n\n\nWi-Fi    \n\n\n\n\nDirect Mode\uff08Ad hoc Mode\uff09\n\n\nClient Mode\uff08Infrastructure Mode\uff09\n\n\n\n\n\n\n\n\nBLE Peripherals    \n\n\n\n\nCentral\n\n\n\n\n\n\n\n\nApplication Examples   \n\n\n\n\nImage Recognition\n\n\nImage Quality Improvement\n\n\nZenith Correction\n\n\nShooting Sequence Control\n\n\nCloud/Social Media Sharing\n\n\nExternal Device Connectivity\n\n\nWebUI\n\n\nWebRTC      \n\n\n\n\n\n\n\n\nWarnings When Developing Plug-ins\n\n\nThis list is taken directly from the How To Develop section of the official RICOH THETA documentation \nhere\n. Please see the \nPlug-in Submission\n section for more information.\n\n\nPlease note \"You cannot start a service\" in the list below - Running a service as a part of your plug-in is not allowed by RICOH. It\u2019s possible that the service continues to run in the background after the plug-in is stopped. This can end up being a resource issue for the camera. Therefore, implementing something like an \u201caccount manager service\u201d will mean your plug-in will be rejected by RICOH.\n  \n\n\n\n\nTo install the developed plug-in on RICOH THETA V you need to enable ADB. Please register as a developer with RICOH and enable ADB according to the documentation. (Please be patient as we are planning to release the developer registration mechanism and effective ADB usage techniques in the near future.)\n\n\nPlease limit the size of the plug-in to 256MB\n\n\nPlug-in and package names cannot exceed 64 characters and an extension must use apk\n\n\nVersion number must follow the \nversioning information\n\n\nUse of \nopen source licenses\n must be explicitly stated\n\n\nYou cannot start a service\n\n\nWhen you press and hold the mode button for 2 seconds or more, the plug-in must terminate\n\n\nWhen the plug-in is terminated, the plug-in must give a \nnotification of termination for the plug-in", 
            "title": "Requirements"
        }, 
        {
            "location": "/requirements/#requirements-for-development", 
            "text": "", 
            "title": "Requirements for Development"
        }, 
        {
            "location": "/requirements/#required-hardware", 
            "text": "The SDK was tested with a RICOH THETA V under the following conditions:  Camera  Hardware  RICOH THETA V  Firmware  ver.2.30.1 and above  Information on checking and updating the firmware is  here    The camera must be unlocked in Developer Mode. Join the  RICOH THETA Plug-in Partner Program  for information\non unlocking your camera.", 
            "title": "Required Hardware"
        }, 
        {
            "location": "/requirements/#process-to-unlock", 
            "text": "Once you sign up for the partner program, you can use the free Ricoh Desktop\napplication version 3.5 or above to put the camera into Developer Mode using\na USB cable.", 
            "title": "Process to Unlock"
        }, 
        {
            "location": "/requirements/#software-for-development", 
            "text": "Development Environment  Windows 10 Version 1709  In Windows 7, adb connection does not work with USB    macOS High Sierra ver 10.13    Development - Build environment  Android Studio 3.0+  Gradle 3.0.1  Android SDK (API Level 25)  compileSdkVersion 26  buildToolsVersion \"26.0.3\"  minSdkVersion 25  targetSdkVersion 25", 
            "title": "Software for Development"
        }, 
        {
            "location": "/requirements/#theta-plugin-technology-components", 
            "text": "Photography\uff08images/video\uff09       Camera API  AudioManager API  WebAPI     Sensors     Gyroscope (3-axis)  Accelerometer (3-axis)  Magnetometer (3-axis)     UI Elements   Buttons  Microphones  LEDs  Speakers     USB       Device  Host     Wi-Fi       Direct Mode\uff08Ad hoc Mode\uff09  Client Mode\uff08Infrastructure Mode\uff09     BLE Peripherals       Central     Application Examples      Image Recognition  Image Quality Improvement  Zenith Correction  Shooting Sequence Control  Cloud/Social Media Sharing  External Device Connectivity  WebUI  WebRTC", 
            "title": "THETA Plugin Technology Components"
        }, 
        {
            "location": "/requirements/#warnings-when-developing-plug-ins", 
            "text": "This list is taken directly from the How To Develop section of the official RICOH THETA documentation  here . Please see the  Plug-in Submission  section for more information.  Please note \"You cannot start a service\" in the list below - Running a service as a part of your plug-in is not allowed by RICOH. It\u2019s possible that the service continues to run in the background after the plug-in is stopped. This can end up being a resource issue for the camera. Therefore, implementing something like an \u201caccount manager service\u201d will mean your plug-in will be rejected by RICOH.      To install the developed plug-in on RICOH THETA V you need to enable ADB. Please register as a developer with RICOH and enable ADB according to the documentation. (Please be patient as we are planning to release the developer registration mechanism and effective ADB usage techniques in the near future.)  Please limit the size of the plug-in to 256MB  Plug-in and package names cannot exceed 64 characters and an extension must use apk  Version number must follow the  versioning information  Use of  open source licenses  must be explicitly stated  You cannot start a service  When you press and hold the mode button for 2 seconds or more, the plug-in must terminate  When the plug-in is terminated, the plug-in must give a  notification of termination for the plug-in", 
            "title": "Warnings When Developing Plug-ins"
        }, 
        {
            "location": "/hardware/", 
            "text": "Camera Hardware\n\n\n\n\nAPQ8053 (\nSnapdragon 625\n)\n\n\nCPU: Cortex A-53 x8\n\n\nGPU: Qualcomm AdrenoTM 506\n\n\n\n\n\n\n3GB LPDDR3 SDRAM, 32GB eMMC\n\n\nWLAN/BT (2 models)\n\n\n2.4GHz (1-11ch) only\n\n\n2.4GHz(1-11ch) + 5GHz(W52)\n\n\n\n\n\n\n12MP CMOS x2, 4ch MEMS microphones, 1ch speaker", 
            "title": "Camera Hardware"
        }, 
        {
            "location": "/hardware/#camera-hardware", 
            "text": "APQ8053 ( Snapdragon 625 )  CPU: Cortex A-53 x8  GPU: Qualcomm AdrenoTM 506    3GB LPDDR3 SDRAM, 32GB eMMC  WLAN/BT (2 models)  2.4GHz (1-11ch) only  2.4GHz(1-11ch) + 5GHz(W52)    12MP CMOS x2, 4ch MEMS microphones, 1ch speaker", 
            "title": "Camera Hardware"
        }, 
        {
            "location": "/setup/", 
            "text": "SDK Setup\n\n\nAndroid SDK Installation\n\n\nThis section will walk you through the steps to setup your RICOH THETA V development environment, including Android SDK installation, downloading Android Studio, and importing the Ricoh Plugin SDK and Updating the Android Build System.\n\n\nThis community guide has been tested with the Android SDK 3.0.1 and 3.1.1 on Windows 10 (1709) 64bit, Ubuntu 17.10, and macOS High Sierra Version 10.13.4.\n\n\n1 Download Android Studio\n\n\nDownload Android Studio here:\n\n\nhttps://developer.android.com/studio/index.html\n\n\n\n\n\n\n2 Import Ricoh Plugin SDK and Update Android Build System\n\n\nDownload the Ricoh Plugin SDK here:\n\n\nhttps://github.com/ricohapi/theta-plugin-sdk\n\n\n2.1 Import Project\n\n\nIf you've just installed Android Studio, you may choose Import project from the Welcome to Android Studio start up screen:\n\n\n\n\nOtherwise, use the menus. Import Project from File -\n New -\n Import Project.\n\n\n\n\nYou will see the following status bar for a few minutes.\n\n\n\n\n2.2 Security Updates\n\n\nAfter the process completes, you will see a Windows Security Alert.\n\n\n\n\nAllow access to the OpenJDK Platform.\n\n\n2.3 Update Build Tools\n\n\nYou may need to update your Build Tools or Install missing platforms and sync project. \n\n\n\n\nAccept the license terms for 26.0.3 and press Next.\n\n\n\n\nThe components will be installed for you.\n\n\n\n\nAllow Gradle enough time to resync your project.\n\n\n\n\n2.4 Update Gradle\n\n\nAlthough not necessary, you can update Gradle here.\n\n\n\n\n3 Build the APK\n\n\nYou can now inspect your Project in the navigation area.\n\n\n\n\nBuild your APK.\n\n\n\n\nAt the bottom of the Android Studio window, you will see the status of the build.\n\n\n\n\n3.1 Locate the APK\n\n\nClick on the status bar to show your Event Log and locate the APK \nplugin-debug.apk\n. You'll need to know this information to install the APK into your RICOH THETA camera.\n\n\n\n\n\n\nThis concludes the SDK Setup section. Congratulations!", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#sdk-setup", 
            "text": "", 
            "title": "SDK Setup"
        }, 
        {
            "location": "/setup/#android-sdk-installation", 
            "text": "This section will walk you through the steps to setup your RICOH THETA V development environment, including Android SDK installation, downloading Android Studio, and importing the Ricoh Plugin SDK and Updating the Android Build System.  This community guide has been tested with the Android SDK 3.0.1 and 3.1.1 on Windows 10 (1709) 64bit, Ubuntu 17.10, and macOS High Sierra Version 10.13.4.", 
            "title": "Android SDK Installation"
        }, 
        {
            "location": "/setup/#1-download-android-studio", 
            "text": "Download Android Studio here:  https://developer.android.com/studio/index.html", 
            "title": "1 Download Android Studio"
        }, 
        {
            "location": "/setup/#2-import-ricoh-plugin-sdk-and-update-android-build-system", 
            "text": "Download the Ricoh Plugin SDK here:  https://github.com/ricohapi/theta-plugin-sdk", 
            "title": "2 Import Ricoh Plugin SDK and Update Android Build System"
        }, 
        {
            "location": "/setup/#21-import-project", 
            "text": "If you've just installed Android Studio, you may choose Import project from the Welcome to Android Studio start up screen:   Otherwise, use the menus. Import Project from File -  New -  Import Project.   You will see the following status bar for a few minutes.", 
            "title": "2.1 Import Project"
        }, 
        {
            "location": "/setup/#22-security-updates", 
            "text": "After the process completes, you will see a Windows Security Alert.   Allow access to the OpenJDK Platform.", 
            "title": "2.2 Security Updates"
        }, 
        {
            "location": "/setup/#23-update-build-tools", 
            "text": "You may need to update your Build Tools or Install missing platforms and sync project.    Accept the license terms for 26.0.3 and press Next.   The components will be installed for you.   Allow Gradle enough time to resync your project.", 
            "title": "2.3 Update Build Tools"
        }, 
        {
            "location": "/setup/#24-update-gradle", 
            "text": "Although not necessary, you can update Gradle here.", 
            "title": "2.4 Update Gradle"
        }, 
        {
            "location": "/setup/#3-build-the-apk", 
            "text": "You can now inspect your Project in the navigation area.   Build your APK.   At the bottom of the Android Studio window, you will see the status of the build.", 
            "title": "3 Build the APK"
        }, 
        {
            "location": "/setup/#31-locate-the-apk", 
            "text": "Click on the status bar to show your Event Log and locate the APK  plugin-debug.apk . You'll need to know this information to install the APK into your RICOH THETA camera.    This concludes the SDK Setup section. Congratulations!", 
            "title": "3.1 Locate the APK"
        }, 
        {
            "location": "/use/", 
            "text": "Plugin Use\n\n\nThis section will walk you through using Android Debub Bridge (adb) to install a plugin into the camera. You will put the camera into Plugin Mode and test the SDK sample Plugin. You will set the active Plugin using the RICOH THETA mobile app, and you will show a list of all the Plugins installing in the camera using the API.\n\n\n1 Use adb to Connect\n\n\nConnect the THETA V to your developer workstation with a USB cable.\n\n\n\n\nOn Windows, \nadb\n is installed into \n\n\nC:\\Users\\[user]\\AppData\\Local\\Android\\sdk\\platform-tools\n\n\n\nOn the Mac, \nadb\n is installed into\n\n\n/Users/[user]/Library/Android/sdk/platform-tools\n\n\n\n\n\n1.1 Add adb to your PATH\n\n\nYou should add \nadb\n into your PATH.  On Windows, you can edit the PATH with \nControl Panel -\n System and Security -\n System -\n Advanced system settings -\n Environment Variables -\n Path\n\n\n\n\n1.2 Use adb to confirm connection\n\n\nAfter putting \nadb\n into your PATH, start a new cmd shell and run \n\n\nadb devices -l\n\n\n\n\n\nIf you don't use \n-l\n, you can still identify the device by the serial number\nof your THETA V. In the example below, my THETA V has a serial number of 00101082.\n\n\n$ adb devices\nList of devices attached\n* daemon not running. starting it now at tcp:5037 *\n* daemon started successfully *\n00101082    device\n\n\n\n1.3 Use adb to explore file system\n\n\nLog into the camera using \nadb shell\n\n\nDo an \nls\n to list all files. The directory structure and overall environment is the same as a standard Android phone.\n\n\n$ adb shell\nmsm8953_64:/ $ ls -l                                                                                                                                                 \ntotal 4240\ndrwxrwxr-x   5 media_rw media_rw    4096 2017-01-01 00:00 DCIM\ndr-xr-xr-x  17 root     root           0 1970-04-02 10:08 acct\ndrwxr-xr-x   2 root     root          40 1970-01-01 00:00 bt_firmware                             \nlrwxrwxrwx   1 root     root          50 1970-01-01 00:00 bugreports -\n /data/user_de/0/com.android.shell/files/bugreports\ndrwxrwx---   6 system   cache       4096 2017-11-14 15:55 cache\nlrwxrwxrwx   1 root     root          13 1970-01-01 00:00 charger -\n /sbin/healthd\ndrwxr-xr-x   2 root     root           0 1970-04-02 10:08 config\nlrwxrwxrwx   1 root     root          17 1970-01-01 00:00 d -\n /sys/kernel/debug\ndrwxrwx--x  43 system   system      4096 2017-09-21 14:00 data\n-rw-r--r--   1 root     root         966 1970-01-01 00:00 default.prop\ndrwxr-xr-x  15 root     root        3180 2017-11-27 12:50 dev\ndrwxr-xr-x   3 root     root        4096 1970-01-01 00:00 dsp\n\n\n\nChange directory into DCIM/0 \n\n\nThe RICOH THETA Plug-in SDK uses the\n\nandroid.hardware.Camera\n class. It saves images into the normal location you would expect from an Android device. You can also use the \nRICOH THETA API v2.1\n, which is is a WebAPI based on OSC to take pictures from your plug-in by sending a POST command to the internal camera web server.\n\n\n127|msm8953_64:/DCIM/0 $ ls -l\ntotal 128\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Alarms\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-09-22 22:31 Converted\ndrwxrwxr-x 3 media_rw media_rw  4096 2017-09-19 18:15 DCIM\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Download\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Movies\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-10-02 15:31 MtpOperation\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Music\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Notifications\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Pictures\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Podcasts\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Ringtones\n-rw-rw-r-- 1 media_rw media_rw 15972 2017-09-25 23:35 btsnoop_hci.log\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-09-21 14:26 ptp\n\n\n\nLocate Pictures and Movies. These are standard Android directories. The THETA V stores images in /DCIM/0/DCIM/100RICOH\n\n\nmsm8953_64:/DCIM/0/DCIM/100RICOH $\n\nmsm8953_64:/DCIM/0/DCIM/100RICOH $ ls -l                                                                                                             \ntotal 554752\n-rw-rw-r-- 1 media_rw media_rw   1970120 2017-09-28 12:58 R0010025.JPG\n-rw-rw-r-- 1 media_rw media_rw   2402374 2017-09-28 12:58 R0010026.JPG\n-rw-rw-r-- 1 media_rw media_rw   2136165 2017-09-28 12:58 R0010027.JPG\n-rw-rw-r-- 1 media_rw media_rw   2810985 2017-09-28 12:59 R0010028.JPG\n-rw-rw-r-- 1 media_rw media_rw   1834346 2017-10-18 18:34 R0010035.JPG\n-rw-rw-r-- 1 media_rw media_rw    679681 2017-10-21 12:13 R0010036.JPG\n-rw-rw-r-- 1 media_rw media_rw   2103925 2017-10-21 14:16 R0010037.JPG\n-rw-rw-r-- 1 media_rw media_rw  52108839 2017-10-21 14:19 R0010038.MP4\n-rw-rw-r-- 1 media_rw media_rw 108450224 2017-10-21 14:20 R0010039.MP4\n\n\n\n2 Install Plugin into Camera\n\n\nCall \nadb install -r ./theta-plugin-sdk-master/app/build/outputs/apk/debug/app-debug.apk\n\n\n$ adb install -r ./theta-plugin-sdk-master/app/build/outputs/apk/debug/app-debug.apk \n* daemon not running. starting it now at tcp:5037 *\n* daemon started successfully *\nSuccess\n\n\n\n3 Put Camera into Plugin Mode\n\n\nPlugin mode can only be enabled on the RICOH THETA V.\n\n\nPlugins will not work on older THETA models m15, S, or SC. \n\n\nEvery THETA V can be put into plugin mode by first turning the THETA V\non and then pressing the mode button. \n\n\n\n\nAfter pressing the mode button for 2 seconds, release it.\n\n\n\n\nThe \nCamera Status lamp\n will turn solid white.\n\n\n\n\nAdditional information on the side buttons is shown below.\n\n\n\n\nInformation on the front of the camera is shown below.\n\n\n\n\n4 Test SDK Sample Plugin\n\n\nPress the physical button on the camera. There will be a shutter sound. An image will be captured. \n\n\nThe picture will be given a filename that is in numerical sequential order incrementing up from the previous picture. The format will be similar to this example filename: R0010047.JPG. \n\n\nThe plug-in will save the image to a file with the location\nand format similar to the example below.\n\n\n/sdcard/DCIM/100RICOH/R0010047.JPG\n\n\n4.1 Get the picture off the camera\n\n\nGet the file name by using \nadb shell\n.\n\n\nUse \nadb pull\n to get the image file file to your local computer.\n\n\nExample:\n\n\nadb pull /sdcard/DCIM/100RICOH/R0010047.JPG\n\n\n\n4.2 Alternate techniques to get the file and filename\n\n\n\n\nOpen the THETA in File Explorer as you would with a normal Android phone. Uses MTP.\n\n\nUse a tool like Vysor to display a virtual THETA V screen to your workstation. To set up and use Vysor, refer to the section in this community guide on Vysor.\n\n\n\n\nExample of opening camera images up in File Explorer.\n\n\nSelect RICOH THETA V.\n\n\n\n\nIf you use the default storage location, the images will be in:\n\n\nFixed storage \n DCIM \n 100RICOH\n\n\n\n\nDouble-click on the image to open an equirectangular view in Photos.\n\n\n\n\nTo test 360 navigation, drag and drop the image onto a \ntemporary folder on your computer. Then, drag and drop the local\nfile onto the RICOH THETA desktop application.\n\n\n\n\n5 Set Active Plugin with Mobile App\n\n\nUsing the Ricoh mobile app, you can see and select the active plugin. \n\n\nConnect your RICOH THETA mobile app to your THETA V.\n\n\nGo to Settings.\n\n\n\n\nOn the \nSettings\n screen of your mobile app, click on \nCamera settings\n.\n\n\n\n\nOn your \nCamera settings\n screen you will be able to see your\nPlug-in. On the screen at the top of this section, my plug-in is called\n\nPlugin Application\n.\n\n\n\n\nClick on the active plug-in name to display a choice of available plug-ins.\n\n\n\n\nThis process is current as of version 1.17.1 of the Android application.\n\n\n\n\nThis concludes the Plugin Use section. Congratulations!", 
            "title": "Plugin Use"
        }, 
        {
            "location": "/use/#plugin-use", 
            "text": "This section will walk you through using Android Debub Bridge (adb) to install a plugin into the camera. You will put the camera into Plugin Mode and test the SDK sample Plugin. You will set the active Plugin using the RICOH THETA mobile app, and you will show a list of all the Plugins installing in the camera using the API.", 
            "title": "Plugin Use"
        }, 
        {
            "location": "/use/#1-use-adb-to-connect", 
            "text": "Connect the THETA V to your developer workstation with a USB cable.   On Windows,  adb  is installed into   C:\\Users\\[user]\\AppData\\Local\\Android\\sdk\\platform-tools  On the Mac,  adb  is installed into  /Users/[user]/Library/Android/sdk/platform-tools", 
            "title": "1 Use adb to Connect"
        }, 
        {
            "location": "/use/#11-add-adb-to-your-path", 
            "text": "You should add  adb  into your PATH.  On Windows, you can edit the PATH with  Control Panel -  System and Security -  System -  Advanced system settings -  Environment Variables -  Path", 
            "title": "1.1 Add adb to your PATH"
        }, 
        {
            "location": "/use/#12-use-adb-to-confirm-connection", 
            "text": "After putting  adb  into your PATH, start a new cmd shell and run   adb devices -l   If you don't use  -l , you can still identify the device by the serial number\nof your THETA V. In the example below, my THETA V has a serial number of 00101082.  $ adb devices\nList of devices attached\n* daemon not running. starting it now at tcp:5037 *\n* daemon started successfully *\n00101082    device", 
            "title": "1.2 Use adb to confirm connection"
        }, 
        {
            "location": "/use/#13-use-adb-to-explore-file-system", 
            "text": "Log into the camera using  adb shell  Do an  ls  to list all files. The directory structure and overall environment is the same as a standard Android phone.  $ adb shell\nmsm8953_64:/ $ ls -l                                                                                                                                                 \ntotal 4240\ndrwxrwxr-x   5 media_rw media_rw    4096 2017-01-01 00:00 DCIM\ndr-xr-xr-x  17 root     root           0 1970-04-02 10:08 acct\ndrwxr-xr-x   2 root     root          40 1970-01-01 00:00 bt_firmware                             \nlrwxrwxrwx   1 root     root          50 1970-01-01 00:00 bugreports -  /data/user_de/0/com.android.shell/files/bugreports\ndrwxrwx---   6 system   cache       4096 2017-11-14 15:55 cache\nlrwxrwxrwx   1 root     root          13 1970-01-01 00:00 charger -  /sbin/healthd\ndrwxr-xr-x   2 root     root           0 1970-04-02 10:08 config\nlrwxrwxrwx   1 root     root          17 1970-01-01 00:00 d -  /sys/kernel/debug\ndrwxrwx--x  43 system   system      4096 2017-09-21 14:00 data\n-rw-r--r--   1 root     root         966 1970-01-01 00:00 default.prop\ndrwxr-xr-x  15 root     root        3180 2017-11-27 12:50 dev\ndrwxr-xr-x   3 root     root        4096 1970-01-01 00:00 dsp  Change directory into DCIM/0   The RICOH THETA Plug-in SDK uses the android.hardware.Camera  class. It saves images into the normal location you would expect from an Android device. You can also use the  RICOH THETA API v2.1 , which is is a WebAPI based on OSC to take pictures from your plug-in by sending a POST command to the internal camera web server.  127|msm8953_64:/DCIM/0 $ ls -l\ntotal 128\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Alarms\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-09-22 22:31 Converted\ndrwxrwxr-x 3 media_rw media_rw  4096 2017-09-19 18:15 DCIM\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Download\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Movies\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-10-02 15:31 MtpOperation\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Music\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Notifications\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Pictures\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Podcasts\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-01-01 00:00 Ringtones\n-rw-rw-r-- 1 media_rw media_rw 15972 2017-09-25 23:35 btsnoop_hci.log\ndrwxrwxr-x 2 media_rw media_rw  4096 2017-09-21 14:26 ptp  Locate Pictures and Movies. These are standard Android directories. The THETA V stores images in /DCIM/0/DCIM/100RICOH  msm8953_64:/DCIM/0/DCIM/100RICOH $\n\nmsm8953_64:/DCIM/0/DCIM/100RICOH $ ls -l                                                                                                             \ntotal 554752\n-rw-rw-r-- 1 media_rw media_rw   1970120 2017-09-28 12:58 R0010025.JPG\n-rw-rw-r-- 1 media_rw media_rw   2402374 2017-09-28 12:58 R0010026.JPG\n-rw-rw-r-- 1 media_rw media_rw   2136165 2017-09-28 12:58 R0010027.JPG\n-rw-rw-r-- 1 media_rw media_rw   2810985 2017-09-28 12:59 R0010028.JPG\n-rw-rw-r-- 1 media_rw media_rw   1834346 2017-10-18 18:34 R0010035.JPG\n-rw-rw-r-- 1 media_rw media_rw    679681 2017-10-21 12:13 R0010036.JPG\n-rw-rw-r-- 1 media_rw media_rw   2103925 2017-10-21 14:16 R0010037.JPG\n-rw-rw-r-- 1 media_rw media_rw  52108839 2017-10-21 14:19 R0010038.MP4\n-rw-rw-r-- 1 media_rw media_rw 108450224 2017-10-21 14:20 R0010039.MP4", 
            "title": "1.3 Use adb to explore file system"
        }, 
        {
            "location": "/use/#2-install-plugin-into-camera", 
            "text": "Call  adb install -r ./theta-plugin-sdk-master/app/build/outputs/apk/debug/app-debug.apk  $ adb install -r ./theta-plugin-sdk-master/app/build/outputs/apk/debug/app-debug.apk \n* daemon not running. starting it now at tcp:5037 *\n* daemon started successfully *\nSuccess", 
            "title": "2 Install Plugin into Camera"
        }, 
        {
            "location": "/use/#3-put-camera-into-plugin-mode", 
            "text": "Plugin mode can only be enabled on the RICOH THETA V.  Plugins will not work on older THETA models m15, S, or SC.   Every THETA V can be put into plugin mode by first turning the THETA V\non and then pressing the mode button.    After pressing the mode button for 2 seconds, release it.   The  Camera Status lamp  will turn solid white.   Additional information on the side buttons is shown below.   Information on the front of the camera is shown below.", 
            "title": "3 Put Camera into Plugin Mode"
        }, 
        {
            "location": "/use/#4-test-sdk-sample-plugin", 
            "text": "Press the physical button on the camera. There will be a shutter sound. An image will be captured.   The picture will be given a filename that is in numerical sequential order incrementing up from the previous picture. The format will be similar to this example filename: R0010047.JPG.   The plug-in will save the image to a file with the location\nand format similar to the example below.  /sdcard/DCIM/100RICOH/R0010047.JPG", 
            "title": "4 Test SDK Sample Plugin"
        }, 
        {
            "location": "/use/#41-get-the-picture-off-the-camera", 
            "text": "Get the file name by using  adb shell .  Use  adb pull  to get the image file file to your local computer.  Example:  adb pull /sdcard/DCIM/100RICOH/R0010047.JPG", 
            "title": "4.1 Get the picture off the camera"
        }, 
        {
            "location": "/use/#42-alternate-techniques-to-get-the-file-and-filename", 
            "text": "Open the THETA in File Explorer as you would with a normal Android phone. Uses MTP.  Use a tool like Vysor to display a virtual THETA V screen to your workstation. To set up and use Vysor, refer to the section in this community guide on Vysor.   Example of opening camera images up in File Explorer.  Select RICOH THETA V.   If you use the default storage location, the images will be in:  Fixed storage   DCIM   100RICOH   Double-click on the image to open an equirectangular view in Photos.   To test 360 navigation, drag and drop the image onto a \ntemporary folder on your computer. Then, drag and drop the local\nfile onto the RICOH THETA desktop application.", 
            "title": "4.2 Alternate techniques to get the file and filename"
        }, 
        {
            "location": "/use/#5-set-active-plugin-with-mobile-app", 
            "text": "Using the Ricoh mobile app, you can see and select the active plugin.   Connect your RICOH THETA mobile app to your THETA V.  Go to Settings.   On the  Settings  screen of your mobile app, click on  Camera settings .   On your  Camera settings  screen you will be able to see your\nPlug-in. On the screen at the top of this section, my plug-in is called Plugin Application .   Click on the active plug-in name to display a choice of available plug-ins.   This process is current as of version 1.17.1 of the Android application.   This concludes the Plugin Use section. Congratulations!", 
            "title": "5 Set Active Plugin with Mobile App"
        }, 
        {
            "location": "/wifiapi/", 
            "text": "THETA WiFi API\n\n\nIn addition to the Android Camera class, your plug-in can also use the \n\nRICOH THETA API v2.1\n web API. \nSome developers find that using the WiFi API is easier. It is based on simple POST and GET HTTP commands.\n\n\nThere are two ways to access the WiFi API:\n\n\n\n\nYour plug-in can use the WiFi API from inside of the camera\n\n\nA companion mobile or desktop app can use the WiFi API\n\n\n\n\nPlug-in Access to WiFi API\n\n\nSend POST commands \nto the camera's Web API at (http://localhost:8080/). When using the Web API from the plug-in, digest authentication is not required regardless of the wireless LAN mode. For detailed specifications of the Web API, please refer to \nAPI Reference - v2.1 - API \n SDK | RICOH THETA Developers\n\n\nThe Web API can not be used when the plug-in controls the camera device using the Camera API.\n\n\nCompanion App Access to WiFi API\n\n\nNOTE: Community has not verified these steps. Please\nverify and if possible submit an example.\n\n\nSteps:\n\n\n\n\nFinish plug-in to return control to camera\n\n\nPlug-in releases camera resources\n\n\nEstablish a network connection between mobile phone and camera\n\n\nSend HTTP POST or GET command\n\n\n\n\nFinish Plug-in\n\n\nUse \ncom.theta360.plugin.ACTION_FINISH_PLUGIN\n with Broadcast Intent to finish the plug-in.\nA notification of the completion of the plug-in will be sent. When using Broadcast Intent, the following extension data must be set:\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npackageName\n\n\nString\n\n\nPackage Name\n\n\n\n\n\n\nexitStatus\n\n\nString\n\n\n\"success\" or \"failure\". Default is \"success\".\n\n\n\n\n\n\nmessage\n\n\nString\n\n\nOptional. Default is an empty string.\n\n\n\n\n\n\n\n\nWith packageName, specify the package name of the plugin itself. With exitStatus, specify \u201csuccess\u201d when the plug-in ends normally, and \u201cfailure\u201d when it ends abnormally. Setting \u201cexitStatus\u201d to \u201cfailure\u201d will cause the warning sound to be played and LED2 to blink red.\n\n\nRelease camera resources\n\n\nWhen using \u201ccom.theta360.plugin.ACTION_MAIN_CAMERA_CLOSE\u201d with Broadcast Intent, the fact that the plug-in is controlling camera resources will be reported to the camera, and the Camera API will be able to be used.\n\n\nWhen using \u201ccom.theta360.plugin.ACTION_MAIN_CAMERA_OPEN\u201d with Broadcast Intent, the fact that the plug-in has released camera resources will be reported to the camera, and the Camera API will not be able to be used.\n\n\nNetwork Connection To Camera\n\n\nIn order to connect your companion mobile application to the camera, \nyou will need to establish a WiFi connection connection between the camera and the mobile phone.\n\n\nYou can either use Access Point (AP) Mode or Client (CL) Mode. \n\n\nNOTE: Community has not verified that both AP and CL modes work for WiFi API access to the plug-in. Please\nverify and if possible submit an example.\n\n\nInformation on controlling the WLAN is included in the \n\nbroadcast intent section\n of the \nofficial Ricoh documentation.\n\n\n\n\n\n\n\n\nOperation Mode\n\n\nIntent\n\n\n\n\n\n\n\n\n\n\nOFF\n\n\ncom.theta360plugin.ACTION_WLAN_OFF\n\n\n\n\n\n\nAP Mode\n\n\ncom.theta360plugin.ACTION_WLAN_AP\n\n\n\n\n\n\nCL Mode\n\n\ncom.theta360plugin.ACTION_WLAN_CL\n\n\n\n\n\n\n\n\nAP Mode\n\n\nIn AP Mode, the user must first connect their mobile phone to the camera\nby using the camera as SSID or \nWiFi router\n that they connect to. In this\nmode, the user will not have Internet access.\n\n\n\n\nOn some Android devices, the user must also manually allow the phone to\nstay connected to the camera.\n\n\n\n\nClient Mode\n\n\nIn CL Mode, the camera connects to the same WiFi router that people use to connect to the Internet.\nFor example, the camera can connect to the user's office or home router.  The user connects their\nmobile phone to the same router.\n\n\nMore information on developing Client Mode Applications is available in the video below.\n\n\n\n\nTo ensure security, the commands between the companion app and the camera uses Digest Authentication.\n\n\nThe official Ricoh Mobile app can be used to set up the password for Digest Authentication.\n\n\n\n\nIn this mode, the camera WiFi LED will be green.\n\n\n\n\nYour users can configure the camera to connect to their router with WPS. The video below explains the \nprocess of client mode configuration with WPS.\n\n\n\n\n\n\nPOST and GET commands\n\n\nComprehensive HTTP API document is available at\n\nhttps://developers.theta360.com/en/docs/v2.1/api_reference/\n.\n\n\nIf you have questions about the WiFi (Open Spherical Camera) API, please post them\nin the \nTHETA API Usage category\n \nof the community.", 
            "title": "Using WiFi API"
        }, 
        {
            "location": "/wifiapi/#theta-wifi-api", 
            "text": "In addition to the Android Camera class, your plug-in can also use the  RICOH THETA API v2.1  web API. \nSome developers find that using the WiFi API is easier. It is based on simple POST and GET HTTP commands.  There are two ways to access the WiFi API:   Your plug-in can use the WiFi API from inside of the camera  A companion mobile or desktop app can use the WiFi API", 
            "title": "THETA WiFi API"
        }, 
        {
            "location": "/wifiapi/#plug-in-access-to-wifi-api", 
            "text": "Send POST commands \nto the camera's Web API at (http://localhost:8080/). When using the Web API from the plug-in, digest authentication is not required regardless of the wireless LAN mode. For detailed specifications of the Web API, please refer to  API Reference - v2.1 - API   SDK | RICOH THETA Developers  The Web API can not be used when the plug-in controls the camera device using the Camera API.", 
            "title": "Plug-in Access to WiFi API"
        }, 
        {
            "location": "/wifiapi/#companion-app-access-to-wifi-api", 
            "text": "NOTE: Community has not verified these steps. Please\nverify and if possible submit an example.  Steps:   Finish plug-in to return control to camera  Plug-in releases camera resources  Establish a network connection between mobile phone and camera  Send HTTP POST or GET command", 
            "title": "Companion App Access to WiFi API"
        }, 
        {
            "location": "/wifiapi/#finish-plug-in", 
            "text": "Use  com.theta360.plugin.ACTION_FINISH_PLUGIN  with Broadcast Intent to finish the plug-in.\nA notification of the completion of the plug-in will be sent. When using Broadcast Intent, the following extension data must be set:     Key  Type  Description      packageName  String  Package Name    exitStatus  String  \"success\" or \"failure\". Default is \"success\".    message  String  Optional. Default is an empty string.     With packageName, specify the package name of the plugin itself. With exitStatus, specify \u201csuccess\u201d when the plug-in ends normally, and \u201cfailure\u201d when it ends abnormally. Setting \u201cexitStatus\u201d to \u201cfailure\u201d will cause the warning sound to be played and LED2 to blink red.", 
            "title": "Finish Plug-in"
        }, 
        {
            "location": "/wifiapi/#release-camera-resources", 
            "text": "When using \u201ccom.theta360.plugin.ACTION_MAIN_CAMERA_CLOSE\u201d with Broadcast Intent, the fact that the plug-in is controlling camera resources will be reported to the camera, and the Camera API will be able to be used.  When using \u201ccom.theta360.plugin.ACTION_MAIN_CAMERA_OPEN\u201d with Broadcast Intent, the fact that the plug-in has released camera resources will be reported to the camera, and the Camera API will not be able to be used.", 
            "title": "Release camera resources"
        }, 
        {
            "location": "/wifiapi/#network-connection-to-camera", 
            "text": "In order to connect your companion mobile application to the camera, \nyou will need to establish a WiFi connection connection between the camera and the mobile phone.  You can either use Access Point (AP) Mode or Client (CL) Mode.   NOTE: Community has not verified that both AP and CL modes work for WiFi API access to the plug-in. Please\nverify and if possible submit an example.  Information on controlling the WLAN is included in the  broadcast intent section  of the \nofficial Ricoh documentation.     Operation Mode  Intent      OFF  com.theta360plugin.ACTION_WLAN_OFF    AP Mode  com.theta360plugin.ACTION_WLAN_AP    CL Mode  com.theta360plugin.ACTION_WLAN_CL", 
            "title": "Network Connection To Camera"
        }, 
        {
            "location": "/wifiapi/#ap-mode", 
            "text": "In AP Mode, the user must first connect their mobile phone to the camera\nby using the camera as SSID or  WiFi router  that they connect to. In this\nmode, the user will not have Internet access.   On some Android devices, the user must also manually allow the phone to\nstay connected to the camera.", 
            "title": "AP Mode"
        }, 
        {
            "location": "/wifiapi/#client-mode", 
            "text": "In CL Mode, the camera connects to the same WiFi router that people use to connect to the Internet.\nFor example, the camera can connect to the user's office or home router.  The user connects their\nmobile phone to the same router.  More information on developing Client Mode Applications is available in the video below.   To ensure security, the commands between the companion app and the camera uses Digest Authentication.  The official Ricoh Mobile app can be used to set up the password for Digest Authentication.   In this mode, the camera WiFi LED will be green.   Your users can configure the camera to connect to their router with WPS. The video below explains the \nprocess of client mode configuration with WPS.", 
            "title": "Client Mode"
        }, 
        {
            "location": "/wifiapi/#post-and-get-commands", 
            "text": "Comprehensive HTTP API document is available at https://developers.theta360.com/en/docs/v2.1/api_reference/ .  If you have questions about the WiFi (Open Spherical Camera) API, please post them\nin the  THETA API Usage category  \nof the community.", 
            "title": "POST and GET commands"
        }, 
        {
            "location": "/customtips/", 
            "text": "Custom Development Tips\n\n\nThere is extensive documentation on the \n\nRICOH Developer Connection THETA Plug-in portal\n\n\nThe plug-in SDK is a great place to get started. The SDK can be downloaded from \nGitHub\n. If\nyou have any problems please send an email to jcasman@oppkey.com for\n friendly (I hope) help.  :-)\n\n\n HEAD\n\n\nBasic Use of Buttons\n\n\nThere are 2 points to remember in using buttons: \n\n\n\n\nButton types\n\n\nButton operation types\n\n\n\n\nButton Types\n\n\nBelow are button types. Let\u2019s confirm the key code constant which corresponds to them. \n\n\n\n\n\n\n\n\nNumber\n\n\nButton\n\n\nKeycode\n\n\n\n\n\n\n\n\n\n\n4\n\n\nShutter Button\n\n\nKeyReceiver.KEYCODE_CAMERA\n\n\n\n\n\n\n12\n\n\nWi-Fi Button\n\n\nKeyReceiver.KEYCODE_WLAN_ON_OFF\n\n\n\n\n\n\n13\n\n\nMode Button\n\n\nKeyReceiver.KEYCODE_MEDIA_RECORD\n\n\n\n\n\n\n\n\n\n\nButton Operation Types\n\n\nFor button operation, the following callback functions are available: \n\n\n\n\n\n\n\n\nButton Operation\n\n\nCallback Function\n\n\n\n\n\n\n\n\n\n\nPress button\n\n\nonKeyDown\n\n\n\n\n\n\nRelease button\n\n\nonKeyUp\n\n\n\n\n\n\nLong press of Mode Button\n\n\nonKeyLongPress\n\n\n\n\n\n\n\n\nHow to Use Buttons\n\n\nThe concept is you are going to combine button information introduced in the Basics of Buttons section and button operation types.\n\n\nWhen using the \nSDK\n, \nMainActivity\n is the first to be called, but this section focuses on buttons. \n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n\n\nonCreate\n will be called up at the very beginning just once, when \nMainActivity\n is run. \n\n\n    @Override\n    public void onKeyDown(int keyCode, KeyEvent event) {\n        if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n            /*\n             * To take a static picture, use the takePicture method.\n             * You can receive a fileUrl of the static picture in the callback.\n             */\n            new TakePictureTask(mTakePictureTaskCallback).execute();\n        }\n    }\n\n\n\nonKeyDown\n will be run when the button is pushed. In the middle, it\u2019s spilt so that if the \nKEYCODE_CAMERA\n button is pressed, when the shutter button is pressed new \nTakePictureTask\n will be run. \n\n\n    @Override\n    public void onKeyUp(int keyCode, KeyEvent event) {\n        /**\n         * You can control the LED of the camera.\n         * It is possible to change the way of lighting, the cycle of blinking, the color of light emission.\n         * Light emitting color can be changed only LED3.\n         */\n        notificationLedBlink(LedTarget.LED3, LedColor.BLUE, 1000);\n    }\n\n    @Override\n    public void onKeyLongPress(int keyCode, KeyEvent event) {\n        notificationError(\"\");\n    }\n\n\n\nSimilarly, \nonKeyUp\n is run when the button is released, and \nonKeyLongPress\n is run when the button is pushed for a long time. Unlike \nonKeyDown\n where there is a choice, pressing any button will run it. \n\n\nBasic Use of LEDs\n\n\nWhen working with LEDs, there are 3 main points to remember:\n\n\n\n\n3 types of control\u2014On, Off, Flashing\n\n\nCan control LED3 through LED8 for the below list\n\n\nLED3's LED color can be changed\n\n\n\n\n\n\n\n\n\n\nNo.\n\n\nLED\n\n\nLED No\n\n\n\n\n\n\n\n\n\n\n6\n\n\nWi-Fi LED\n\n\nLED3\n\n\n\n\n\n\n7\n\n\nShooting Mode LED\n\n\n(Camera)LED4, (Video)LED5, (Live)LED6\n\n\n\n\n\n\n8\n\n\nVideo Recording LED\n\n\nLED7\n\n\n\n\n\n\n9\n\n\nMemory Warning LED\n\n\nLED8\n\n\n\n\n\n\n\n\n\n\nWorking with the \nSKD\n...\n\n\nIn \npluginlibrary\n, the functions below are available for controlling LEDs.\n\n\nSpecify a color and switch LED3 on. \n\n\npublic void notificationLed3Show(@NonNull LedColor ledColor)\n\n\nSelect LED3 through LED8 and switch the LED on.\n\n\npublic void notificationLedShow(@NonNull LedTarget ledTarget)\n\n\nFlash the LED\n\n\npublic void notificationLedBlink(@NonNull LedTarget ledTarget, LedColor ledColor, int period)\n\n\nTurn the LED off\n\n\npublic void notificationLedHide(@NonNull LedTarget ledTarget)\n\n\n\n\n\n\nLedTarget\n - With \nenum\n, select one from LED3, LED4, ..., LED8\n\n\n\n\n\n\nLedColor\n - With \nenum\n, select one from RED, GREEN, BLUE, CYAN, MAGENTA, YELLOW, WHITE. Default is BLUE.\n\n\n\n\n\n\nperiod\n - When using flash control, 1 cycle period (ms) is set between 250-2000. A number below 250 will be set at 250, and a number above 2000 will be set at 2000.\n\n\n\n\n\n\nCreating a Plug-in to Change the Colors of the Wireless LED\n\n\nHere is an example of a plug-in that changes the wireless LED colors randomly and stops when the shutter button is pressed. It was created by RICOH's @meronpan. \nThis video shows the results\n. \n\n\nThe 2 changes below will be added.\n\n\n\n\nMainActivity\n\n\nAndroidManifest.xml\n\n\n\n\nChanging \nMainActivity\n\n\nMainActivity\n was changed as shown below.\n\n\npackage com.theta360.pluginapplication;\n\nimport android.os.Bundle;\nimport android.view.KeyEvent;\nimport com.theta360.pluginapplication.task.TakePictureTask;\nimport com.theta360.pluginapplication.task.TakePictureTask.Callback;\nimport com.theta360.pluginlibrary.activity.PluginActivity;\nimport com.theta360.pluginlibrary.callback.KeyCallback;\nimport com.theta360.pluginlibrary.receiver.KeyReceiver;\nimport com.theta360.pluginlibrary.values.LedColor;\nimport com.theta360.pluginlibrary.values.LedTarget;\n\nimport java.util.Random;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class MainActivity extends PluginActivity {\n\n    //define schedule time interval\n    private static final int TIMER_INTERVAL_PERIOD = 250;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //set timer so LED color will renew at certain time interval\n        Timer timer = new Timer();\n\n        Random ledColorRand = new Random();\n        Random ledTargetRand = new Random();\n        Random ledHideRand = new Random();\n\n        //set run to perform every 250ms\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                //select LED color randomly\n                int ledColorNum = ledColorRand.nextInt(LedColor.values().length);\n                //select turning on LED randomly\n                int ledTargetNum = ledTargetRand.nextInt(LedTarget.values().length);\n                //select turning off LED randomly\n                int ledHideNum = ledHideRand.nextInt(LedTarget.values().length);\n\n                //turn on LED3 with randomly selected color\n                notificationLed3Show(LedColor.values()[ledColorNum]);\n                //turn on randomly selected LED\n                notificationLedShow(LedTarget.values()[ledTargetNum]);\n                //turn off randomly selected LED\n                notificationLedHide(LedTarget.values()[ledHideNum]);\n            }\n        }, 0, TIMER_INTERVAL_PERIOD);\n\n\n        // Set a callback when a button operation event is acquired.\n        setKeyCallback(new KeyCallback() {\n            @Override\n            public void onKeyDown(int keyCode, KeyEvent event) {\n                if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n                    //by ending Timer, end randomly flashing color with certain interval\n                    timer.cancel();\n                    //turn off LED\n                    notificationLedHide(LedTarget.LED3);\n                    notificationLedHide(LedTarget.LED4);\n                    notificationLedHide(LedTarget.LED5);\n                    notificationLedHide(LedTarget.LED6);\n                    notificationLedHide(LedTarget.LED7);\n                    notificationLedHide(LedTarget.LED8);\n                }\n            }\n\n            @Override\n            public void onKeyUp(int keyCode, KeyEvent event) {\n            }\n\n            @Override\n            public void onKeyLongPress(int keyCode, KeyEvent event) {\n                //by ending Timer, end randomly flashing color with certain interval\n                timer.cancel();\n                //turn off LED\n                notificationLedHide(LedTarget.LED3);\n                notificationLedHide(LedTarget.LED4);\n                notificationLedHide(LedTarget.LED5);\n                notificationLedHide(LedTarget.LED6);\n                notificationLedHide(LedTarget.LED7);\n                notificationLedHide(LedTarget.LED8);\n                //notification that plug-in has ended correctly\n                notificationSuccess();\n            }\n        });\n    }\n}\n\n\n\nLooking at the details\u2026\n\n\n//set run to perform every 250ms\ntimer.schedule(new TimerTask() {\n    @Override\n    public void run() {\n        //select LED color randomly\n        int ledColorNum = ledColorRand.nextInt(LedColor.values().length);\n        //select turning on LED randomly\n        int ledTargetNum = ledTargetRand.nextInt(LedTarget.values().length);\n        //select turning off LED randomly\n        int ledHideNum = ledHideRand.nextInt(LedTarget.values().length);\n\n        //turn on LED3 with randomly selected color\n        notificationLed3Show(LedColor.values()[ledColorNum]);\n        //select turning on LED randomly\n        notificationLedShow(LedTarget.values()[ledTargetNum]);\n        //select turning off LED randomly\n        notificationLedHide(LedTarget.values()[ledHideNum]);\n    }\n}, 0, TIMER_INTERVAL_PERIOD);\n\n\n\ntimer.schedule\n will be called only once after running, because it was placed within \nonCreate\n. However, the run inside of \nonCreate\n will be called up periodically. With \ntimer.schedule\n, run will be performed every 250ms. \n\n\n    @Override\n    public void onKeyDown(int keyCode, KeyEvent event) {\n        if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n            //by ending Timer, end randomly flashing color with certain interval\n            timer.cancel();\n            //turn off LED\n            notificationLedHide(LedTarget.LED3);\n            notificationLedHide(LedTarget.LED4);\n            notificationLedHide(LedTarget.LED5);\n            notificationLedHide(LedTarget.LED6);\n            notificationLedHide(LedTarget.LED7);\n            notificationLedHide(LedTarget.LED8);\n        }\n    }\n\n\n\nOriginally, the code to take pictures with the camera was placed inside \nonKeyDown\n, but that part was rewritten to deal with turning off the LED. \nrun\n, which had been periodically running with \ntimer.cancel\n, is stopped. After that, updating the LED ends.\n\n\nThe last step is to turn the LED off by \nnotificationLedHide\n.\n\n\n        @Override\n        public void onKeyLongPress(int keyCode, KeyEvent event) {\n            //by ending Timer, end randomly flashing color with certain interval\n            timer.cancel();\n            //turn LED off\n            notificationLedHide(LedTarget.LED3);\n            notificationLedHide(LedTarget.LED4);\n            notificationLedHide(LedTarget.LED5);\n            notificationLedHide(LedTarget.LED6);\n            notificationLedHide(LedTarget.LED7);\n            notificationLedHide(LedTarget.LED8);\n            //notification that plug-in has ended correctly\n            notificationSuccess();\n        }\n\n\n\nonKeyLongPress\n is called up when the Mode Button is pressed for a long time. \nInside of \nonKeyLongPress\n, the process of ending the plug-in is performed.\n\ntimer.cancel\n and \nnotificationLedHide\n have the same processing purpose as \nonKeyDown\n.\nFinally, \nnotificationSuccess\n is run to notify that the plug-in has ended correctly.\n\n\nChanging AndroidManifest.xml\n\n\nBecause the THETA has no screen, the following change was made.\n\n\nAndroidManifest.xml\n        \nactivity android:name=\".MainActivity\"\n            android:screenOrientation=\"portrait\"\n            \n\n            \nintent-filter\n\n                \naction android:name=\"android.intent.action.MAIN\" /\n\n\n                \ncategory android:name=\"android.intent.category.LAUNCHER\" /\n\n            \n/intent-filter\n\n        \n/activity\n\n\n\n\nIn order to set the screen orientation, \nandroid:screenOrientation=\u201cportrait\u201d\n was added.\nWithout this code, when the THETA is tilted, it would be recognized that the screen has turned and \nonCreate\n would be run. As long as Android is running, when the screen is turned, the app is initialized. \n\n\nInternal Storage\n\n\n=======\n\n\nProblems Importing pluginlibrary into New Projects\n\n\nThis was originally published on \nGitHub issues\n.\n\n\nSome people have encountered problems with importimg the pluginlibrary into a new project.\nIf you import the library by selecting \"File\"-\"New\"-\"Import Module...\" in Android Studio 3.1.3,\nthe folder may not show up in Android Studio. StackOverflow has a\n\ntip\n about this problem.\n\n\n\n\nImport \"pluginlibrary\" in the SDK by selecting \"File\"-\"New\"-\"Import Module...\"\n\n\nAdd a text \"include ':app', ':pluginlibrary'\" in \"settings.gradle\" file\n\n\nSync by selecting \"File\"-\"Sync Project with Gradle Files\".\n\n\n\n\nYou should now be able to import the pluginlibrary into your project.\n\n\nInternal Storage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8571d2749aa5200c1ff2d3be0a4bd67a0f02b2db\nThe THETA V has a maximum storage size of 32GB. Developers can use 19GB  for storage of their plug-in applications and approximately 1.5GB for the plug-in itself. The partition for data is \n/data\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/sdcard/DCIM/\n can be used.\n\n\nThis is an example of saving all your images to a sub-directory \nConstruction\n and then\nadding a number to the file name. There's a separate bit of code to iterate the roomNumber.\n\n\nString fileUrl = \"/storage/emulated/0/DCIM/Construction/room\" + roomNumberStr + \"sect01.jpg\";\n\n\n\nText to Speech Status\n\n\nAs of May 21, 2018, \nandroid.speech.tts\n does not work. This may\nstart working in a future update. For now, you can try other Text-Speech engines\nfor Android. A list of untested engines is \nhere\n. Another untested possibility\ncould be the \nFlite TTS Engine for Android\n.\n\n\nCurrently, human speech can be played directly from the internal speaker of \nthe THETA V. However, the volume is low. We are trying to figure out how\nto increase the volume.\n\n\nHere's a \ntest of the THETA V playing \"I Have a Dream\"\n by Dr. Martin Luther King Jr.\n\n\nAudioManager\n\n\nThis information is \noriginally from GitHub Issues\n.\n\n\nThe \"RicMicSelect\" and \"RicMicSurrondVolumeLevel\" in \n\nCamera API\n are the settings for \n[AudioManager](https://developer.android.com/reference/android/media/AudioManager_.\n\n\nThis is an example of using 4ch B-format recording.\n\n\n    mAudioManager.setParameters(\"RicUseBFormat=true\");\n    mAudioManager.setParameters(\"RicMicSelect=RicMicSelectAuto\");\n    mAudioManager\n            .setParameters(\"RicMicSurroundVolumeLevel=RicMicSurroundVolumeLevelNormal\");\n\n\n\nHere, there is a setting \"RicUseBFormat\" for enabling 4ch B-format output. Because Android supports only mono (1ch) or stereo (2ch), use \"RicUseBFormat=false\" if you use normal audio features defined in Android.\n\n\nXMP Data\n\n\n[UPDATED May 1, 2018] Images produced by the Plugin Application have XMP data in them. These screenshots are just looking at image properties using the GNOME Image Viewer app on an Ubuntu laptop. \n\n\nHere is an image taken with the Plugin Application, showing ProjectionType and more:\n\n\n\n\nIn comparison, here is an normal image taken at my desk, using the RICOH THETA V as a camera, not in Plug-in Mode. \n\n\n\n\nHowever, I have access to an example of a dual fish-eye image taken with a plug-in built by a developer that does not include XMP data. This may indicate that as you develop your plug-in, you may need to inject XMP data. There's an uncomfirmed rumor that Ricoh is working\non a library to help with this.\n\n\nHere's the example:", 
            "title": "Custom Development Tips"
        }, 
        {
            "location": "/customtips/#custom-development-tips", 
            "text": "There is extensive documentation on the  RICOH Developer Connection THETA Plug-in portal  The plug-in SDK is a great place to get started. The SDK can be downloaded from  GitHub . If\nyou have any problems please send an email to jcasman@oppkey.com for\n friendly (I hope) help.  :-)   HEAD", 
            "title": "Custom Development Tips"
        }, 
        {
            "location": "/customtips/#basic-use-of-buttons", 
            "text": "There are 2 points to remember in using buttons:    Button types  Button operation types", 
            "title": "Basic Use of Buttons"
        }, 
        {
            "location": "/customtips/#button-types", 
            "text": "Below are button types. Let\u2019s confirm the key code constant which corresponds to them.      Number  Button  Keycode      4  Shutter Button  KeyReceiver.KEYCODE_CAMERA    12  Wi-Fi Button  KeyReceiver.KEYCODE_WLAN_ON_OFF    13  Mode Button  KeyReceiver.KEYCODE_MEDIA_RECORD", 
            "title": "Button Types"
        }, 
        {
            "location": "/customtips/#button-operation-types", 
            "text": "For button operation, the following callback functions are available:      Button Operation  Callback Function      Press button  onKeyDown    Release button  onKeyUp    Long press of Mode Button  onKeyLongPress", 
            "title": "Button Operation Types"
        }, 
        {
            "location": "/customtips/#how-to-use-buttons", 
            "text": "The concept is you are going to combine button information introduced in the Basics of Buttons section and button operation types.  When using the  SDK ,  MainActivity  is the first to be called, but this section focuses on buttons.       @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);  onCreate  will be called up at the very beginning just once, when  MainActivity  is run.       @Override\n    public void onKeyDown(int keyCode, KeyEvent event) {\n        if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n            /*\n             * To take a static picture, use the takePicture method.\n             * You can receive a fileUrl of the static picture in the callback.\n             */\n            new TakePictureTask(mTakePictureTaskCallback).execute();\n        }\n    }  onKeyDown  will be run when the button is pushed. In the middle, it\u2019s spilt so that if the  KEYCODE_CAMERA  button is pressed, when the shutter button is pressed new  TakePictureTask  will be run.       @Override\n    public void onKeyUp(int keyCode, KeyEvent event) {\n        /**\n         * You can control the LED of the camera.\n         * It is possible to change the way of lighting, the cycle of blinking, the color of light emission.\n         * Light emitting color can be changed only LED3.\n         */\n        notificationLedBlink(LedTarget.LED3, LedColor.BLUE, 1000);\n    }\n\n    @Override\n    public void onKeyLongPress(int keyCode, KeyEvent event) {\n        notificationError(\"\");\n    }  Similarly,  onKeyUp  is run when the button is released, and  onKeyLongPress  is run when the button is pushed for a long time. Unlike  onKeyDown  where there is a choice, pressing any button will run it.", 
            "title": "How to Use Buttons"
        }, 
        {
            "location": "/customtips/#basic-use-of-leds", 
            "text": "When working with LEDs, there are 3 main points to remember:   3 types of control\u2014On, Off, Flashing  Can control LED3 through LED8 for the below list  LED3's LED color can be changed      No.  LED  LED No      6  Wi-Fi LED  LED3    7  Shooting Mode LED  (Camera)LED4, (Video)LED5, (Live)LED6    8  Video Recording LED  LED7    9  Memory Warning LED  LED8      Working with the  SKD ...  In  pluginlibrary , the functions below are available for controlling LEDs.  Specify a color and switch LED3 on.   public void notificationLed3Show(@NonNull LedColor ledColor)  Select LED3 through LED8 and switch the LED on.  public void notificationLedShow(@NonNull LedTarget ledTarget)  Flash the LED  public void notificationLedBlink(@NonNull LedTarget ledTarget, LedColor ledColor, int period)  Turn the LED off  public void notificationLedHide(@NonNull LedTarget ledTarget)    LedTarget  - With  enum , select one from LED3, LED4, ..., LED8    LedColor  - With  enum , select one from RED, GREEN, BLUE, CYAN, MAGENTA, YELLOW, WHITE. Default is BLUE.    period  - When using flash control, 1 cycle period (ms) is set between 250-2000. A number below 250 will be set at 250, and a number above 2000 will be set at 2000.", 
            "title": "Basic Use of LEDs"
        }, 
        {
            "location": "/customtips/#creating-a-plug-in-to-change-the-colors-of-the-wireless-led", 
            "text": "Here is an example of a plug-in that changes the wireless LED colors randomly and stops when the shutter button is pressed. It was created by RICOH's @meronpan.  This video shows the results .   The 2 changes below will be added.   MainActivity  AndroidManifest.xml", 
            "title": "Creating a Plug-in to Change the Colors of the Wireless LED"
        }, 
        {
            "location": "/customtips/#changing-mainactivity", 
            "text": "MainActivity  was changed as shown below.  package com.theta360.pluginapplication;\n\nimport android.os.Bundle;\nimport android.view.KeyEvent;\nimport com.theta360.pluginapplication.task.TakePictureTask;\nimport com.theta360.pluginapplication.task.TakePictureTask.Callback;\nimport com.theta360.pluginlibrary.activity.PluginActivity;\nimport com.theta360.pluginlibrary.callback.KeyCallback;\nimport com.theta360.pluginlibrary.receiver.KeyReceiver;\nimport com.theta360.pluginlibrary.values.LedColor;\nimport com.theta360.pluginlibrary.values.LedTarget;\n\nimport java.util.Random;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class MainActivity extends PluginActivity {\n\n    //define schedule time interval\n    private static final int TIMER_INTERVAL_PERIOD = 250;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //set timer so LED color will renew at certain time interval\n        Timer timer = new Timer();\n\n        Random ledColorRand = new Random();\n        Random ledTargetRand = new Random();\n        Random ledHideRand = new Random();\n\n        //set run to perform every 250ms\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                //select LED color randomly\n                int ledColorNum = ledColorRand.nextInt(LedColor.values().length);\n                //select turning on LED randomly\n                int ledTargetNum = ledTargetRand.nextInt(LedTarget.values().length);\n                //select turning off LED randomly\n                int ledHideNum = ledHideRand.nextInt(LedTarget.values().length);\n\n                //turn on LED3 with randomly selected color\n                notificationLed3Show(LedColor.values()[ledColorNum]);\n                //turn on randomly selected LED\n                notificationLedShow(LedTarget.values()[ledTargetNum]);\n                //turn off randomly selected LED\n                notificationLedHide(LedTarget.values()[ledHideNum]);\n            }\n        }, 0, TIMER_INTERVAL_PERIOD);\n\n\n        // Set a callback when a button operation event is acquired.\n        setKeyCallback(new KeyCallback() {\n            @Override\n            public void onKeyDown(int keyCode, KeyEvent event) {\n                if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n                    //by ending Timer, end randomly flashing color with certain interval\n                    timer.cancel();\n                    //turn off LED\n                    notificationLedHide(LedTarget.LED3);\n                    notificationLedHide(LedTarget.LED4);\n                    notificationLedHide(LedTarget.LED5);\n                    notificationLedHide(LedTarget.LED6);\n                    notificationLedHide(LedTarget.LED7);\n                    notificationLedHide(LedTarget.LED8);\n                }\n            }\n\n            @Override\n            public void onKeyUp(int keyCode, KeyEvent event) {\n            }\n\n            @Override\n            public void onKeyLongPress(int keyCode, KeyEvent event) {\n                //by ending Timer, end randomly flashing color with certain interval\n                timer.cancel();\n                //turn off LED\n                notificationLedHide(LedTarget.LED3);\n                notificationLedHide(LedTarget.LED4);\n                notificationLedHide(LedTarget.LED5);\n                notificationLedHide(LedTarget.LED6);\n                notificationLedHide(LedTarget.LED7);\n                notificationLedHide(LedTarget.LED8);\n                //notification that plug-in has ended correctly\n                notificationSuccess();\n            }\n        });\n    }\n}  Looking at the details\u2026  //set run to perform every 250ms\ntimer.schedule(new TimerTask() {\n    @Override\n    public void run() {\n        //select LED color randomly\n        int ledColorNum = ledColorRand.nextInt(LedColor.values().length);\n        //select turning on LED randomly\n        int ledTargetNum = ledTargetRand.nextInt(LedTarget.values().length);\n        //select turning off LED randomly\n        int ledHideNum = ledHideRand.nextInt(LedTarget.values().length);\n\n        //turn on LED3 with randomly selected color\n        notificationLed3Show(LedColor.values()[ledColorNum]);\n        //select turning on LED randomly\n        notificationLedShow(LedTarget.values()[ledTargetNum]);\n        //select turning off LED randomly\n        notificationLedHide(LedTarget.values()[ledHideNum]);\n    }\n}, 0, TIMER_INTERVAL_PERIOD);  timer.schedule  will be called only once after running, because it was placed within  onCreate . However, the run inside of  onCreate  will be called up periodically. With  timer.schedule , run will be performed every 250ms.       @Override\n    public void onKeyDown(int keyCode, KeyEvent event) {\n        if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n            //by ending Timer, end randomly flashing color with certain interval\n            timer.cancel();\n            //turn off LED\n            notificationLedHide(LedTarget.LED3);\n            notificationLedHide(LedTarget.LED4);\n            notificationLedHide(LedTarget.LED5);\n            notificationLedHide(LedTarget.LED6);\n            notificationLedHide(LedTarget.LED7);\n            notificationLedHide(LedTarget.LED8);\n        }\n    }  Originally, the code to take pictures with the camera was placed inside  onKeyDown , but that part was rewritten to deal with turning off the LED.  run , which had been periodically running with  timer.cancel , is stopped. After that, updating the LED ends.  The last step is to turn the LED off by  notificationLedHide .          @Override\n        public void onKeyLongPress(int keyCode, KeyEvent event) {\n            //by ending Timer, end randomly flashing color with certain interval\n            timer.cancel();\n            //turn LED off\n            notificationLedHide(LedTarget.LED3);\n            notificationLedHide(LedTarget.LED4);\n            notificationLedHide(LedTarget.LED5);\n            notificationLedHide(LedTarget.LED6);\n            notificationLedHide(LedTarget.LED7);\n            notificationLedHide(LedTarget.LED8);\n            //notification that plug-in has ended correctly\n            notificationSuccess();\n        }  onKeyLongPress  is called up when the Mode Button is pressed for a long time. \nInside of  onKeyLongPress , the process of ending the plug-in is performed. timer.cancel  and  notificationLedHide  have the same processing purpose as  onKeyDown .\nFinally,  notificationSuccess  is run to notify that the plug-in has ended correctly.", 
            "title": "Changing MainActivity"
        }, 
        {
            "location": "/customtips/#changing-androidmanifestxml", 
            "text": "Because the THETA has no screen, the following change was made.  AndroidManifest.xml\n         activity android:name=\".MainActivity\"\n            android:screenOrientation=\"portrait\"\n             \n             intent-filter \n                 action android:name=\"android.intent.action.MAIN\" / \n\n                 category android:name=\"android.intent.category.LAUNCHER\" / \n             /intent-filter \n         /activity   In order to set the screen orientation,  android:screenOrientation=\u201cportrait\u201d  was added.\nWithout this code, when the THETA is tilted, it would be recognized that the screen has turned and  onCreate  would be run. As long as Android is running, when the screen is turned, the app is initialized.", 
            "title": "Changing AndroidManifest.xml"
        }, 
        {
            "location": "/customtips/#internal-storage", 
            "text": "=======", 
            "title": "Internal Storage"
        }, 
        {
            "location": "/customtips/#problems-importing-pluginlibrary-into-new-projects", 
            "text": "This was originally published on  GitHub issues .  Some people have encountered problems with importimg the pluginlibrary into a new project.\nIf you import the library by selecting \"File\"-\"New\"-\"Import Module...\" in Android Studio 3.1.3,\nthe folder may not show up in Android Studio. StackOverflow has a tip  about this problem.   Import \"pluginlibrary\" in the SDK by selecting \"File\"-\"New\"-\"Import Module...\"  Add a text \"include ':app', ':pluginlibrary'\" in \"settings.gradle\" file  Sync by selecting \"File\"-\"Sync Project with Gradle Files\".   You should now be able to import the pluginlibrary into your project.", 
            "title": "Problems Importing pluginlibrary into New Projects"
        }, 
        {
            "location": "/customtips/#internal-storage_1", 
            "text": "8571d2749aa5200c1ff2d3be0a4bd67a0f02b2db\nThe THETA V has a maximum storage size of 32GB. Developers can use 19GB  for storage of their plug-in applications and approximately 1.5GB for the plug-in itself. The partition for data is  /data .         /sdcard/DCIM/  can be used.  This is an example of saving all your images to a sub-directory  Construction  and then\nadding a number to the file name. There's a separate bit of code to iterate the roomNumber.  String fileUrl = \"/storage/emulated/0/DCIM/Construction/room\" + roomNumberStr + \"sect01.jpg\";", 
            "title": "Internal Storage"
        }, 
        {
            "location": "/customtips/#text-to-speech-status", 
            "text": "As of May 21, 2018,  android.speech.tts  does not work. This may\nstart working in a future update. For now, you can try other Text-Speech engines\nfor Android. A list of untested engines is  here . Another untested possibility\ncould be the  Flite TTS Engine for Android .  Currently, human speech can be played directly from the internal speaker of \nthe THETA V. However, the volume is low. We are trying to figure out how\nto increase the volume.  Here's a  test of the THETA V playing \"I Have a Dream\"  by Dr. Martin Luther King Jr.", 
            "title": "Text to Speech Status"
        }, 
        {
            "location": "/customtips/#audiomanager", 
            "text": "This information is  originally from GitHub Issues .  The \"RicMicSelect\" and \"RicMicSurrondVolumeLevel\" in  Camera API  are the settings for \n[AudioManager](https://developer.android.com/reference/android/media/AudioManager_.  This is an example of using 4ch B-format recording.      mAudioManager.setParameters(\"RicUseBFormat=true\");\n    mAudioManager.setParameters(\"RicMicSelect=RicMicSelectAuto\");\n    mAudioManager\n            .setParameters(\"RicMicSurroundVolumeLevel=RicMicSurroundVolumeLevelNormal\");  Here, there is a setting \"RicUseBFormat\" for enabling 4ch B-format output. Because Android supports only mono (1ch) or stereo (2ch), use \"RicUseBFormat=false\" if you use normal audio features defined in Android.", 
            "title": "AudioManager"
        }, 
        {
            "location": "/customtips/#xmp-data", 
            "text": "[UPDATED May 1, 2018] Images produced by the Plugin Application have XMP data in them. These screenshots are just looking at image properties using the GNOME Image Viewer app on an Ubuntu laptop.   Here is an image taken with the Plugin Application, showing ProjectionType and more:   In comparison, here is an normal image taken at my desk, using the RICOH THETA V as a camera, not in Plug-in Mode.    However, I have access to an example of a dual fish-eye image taken with a plug-in built by a developer that does not include XMP data. This may indicate that as you develop your plug-in, you may need to inject XMP data. There's an uncomfirmed rumor that Ricoh is working\non a library to help with this.  Here's the example:", 
            "title": "XMP Data"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuring Your Plug-in\n\n\nConfiguration of Plug-in With Web Server\n\n\nIf you want to configure your plug-in with an external mobile app, one strategy is to embed an HTTP server into\nyour plug-in. A simple mobile app can then talk to the plug-in through the embedded HTTP server.\nWith this configuration strategy, the plug-in can launch a web server on port 8888 that provides a WebUI or its own API. \n\n\nYou must use port 8888 on the plug-in web server, as the other ports are blocked. You can then\nbuild a basic app on a smartphone to access the \nplug-in web server on the THETA V.\n\n\nDevelopers have reported success using NanoHttpd, which is available from GitHub at \n\nhttps://github.com/NanoHttpd/nanohttpd\n.\n\n\nAnother way to access the plug-in configuration page you create is to use the OpenPluginPage API from the Ricoh v2.1 WiFi API on port 80. It will redirect to port 8888.\n\n\nInformation on the OpenPluginPage API is available here:\n\n\nhttps://developers.theta360.com/en/docs/v2.1/api_reference/protocols/open_plugin_page.html\n\n\nYour app can look for the presence or absence of the web server by using the Web API's \ncamera._listPlugins\n. The information from camera._listPlugins consists of information described in the configuration file (\\assets\\settings.json) of each plug-in. If the setting file does not exist or the setting value is incorrect, the default value is written in the camera._listPlugins information. \n\n\nSample configuration file:\n\n\n{\n \nwebServer\n: true\n}\n\n\n\n\nFrom talking with the community, we think the process is shown below.", 
            "title": "Plugin Configuration"
        }, 
        {
            "location": "/configuration/#configuring-your-plug-in", 
            "text": "", 
            "title": "Configuring Your Plug-in"
        }, 
        {
            "location": "/configuration/#configuration-of-plug-in-with-web-server", 
            "text": "If you want to configure your plug-in with an external mobile app, one strategy is to embed an HTTP server into\nyour plug-in. A simple mobile app can then talk to the plug-in through the embedded HTTP server.\nWith this configuration strategy, the plug-in can launch a web server on port 8888 that provides a WebUI or its own API.   You must use port 8888 on the plug-in web server, as the other ports are blocked. You can then\nbuild a basic app on a smartphone to access the \nplug-in web server on the THETA V.  Developers have reported success using NanoHttpd, which is available from GitHub at  https://github.com/NanoHttpd/nanohttpd .  Another way to access the plug-in configuration page you create is to use the OpenPluginPage API from the Ricoh v2.1 WiFi API on port 80. It will redirect to port 8888.  Information on the OpenPluginPage API is available here:  https://developers.theta360.com/en/docs/v2.1/api_reference/protocols/open_plugin_page.html  Your app can look for the presence or absence of the web server by using the Web API's  camera._listPlugins . The information from camera._listPlugins consists of information described in the configuration file (\\assets\\settings.json) of each plug-in. If the setting file does not exist or the setting value is incorrect, the default value is written in the camera._listPlugins information.   Sample configuration file:  {\n  webServer : true\n}  From talking with the community, we think the process is shown below.", 
            "title": "Configuration of Plug-in With Web Server"
        }, 
        {
            "location": "/workflow/", 
            "text": "Development Workflow Tips\n\n\nDebugging\n\n\nSave logcat to file on camera\n\n\nThis is a typical debugging workflow:\n\n\n\n\nEnter \nadb shell\n in terminal to enter the shell in the camera.\n\n\nlogcat \n /sdcard/DCIM/log.txt\n\n\nReproduce issue, camera may reboot.\n\n\nadb pull /sdcard/DCIM/log.txt\n in terminal \n\n\n\n\nView logcat on workstation\n\n\nFor some messages, you can also debug the THETA V with a USB \ncable and adb in real-time. The camera will \noperate in Plugin Mode while connected to adb. It's better to\nsave to save as explained above because the camera may lock or \nreboot when it encounters the bug and you'll lose the connection.\n\n\n\n\nYou will be able to get debug messages similar to the example below:\n\n\n   12-14 07:53:24.105  1171  1373 E TaskPersister: File error accessing recents directory (directory doesn't exist?).\n\n\n\nExample debug output with the camera connected to my Linux computer with a USB cable \nand in plug-in mode.\n\n\n\n\nSet Active Plugin\n\n\nWhen you develop the plugin application, a companion mobile application can set the active plugin using the\nWiFi API of the camera. The Ricoh mobile application that\nmost of your users will also have can set the active plugin. For\ntesting, you can either use the Ricoh mobile app, build your own mobile app, or send a REST command\nusing an HTTP testing tool such as \n\ncurl\n  or \nPostman\n. \n\n\nShow List of Plugins With API\n\n\nThe POST command:\n\n\n$ curl -X POST 192.168.1.1/osc/commands/execute --data '{\"name\":\"camera._listPlugins\"}' -H 'content-type: application/json'\n\n\n\nThe response\n\n\n{\n\"name\":\"camera._listPlugins\",\n\"results\":{\n    \"plugins\":[\n        {\n            \"applicationName\":\"Remote Playback\",\n            \"boot\":false,\n            \"bootOptions\":\"\",\n            \"force\":false,\n            \"foreground\":false,\n            \"packageName\":\"com.theta.remoteplayback\",\n            \"running\":false,\n            \"type\":\"extended\",\n            \"version\":\"1.00.20171106144412\"\n        },\n        {\n            \"applicationName\":\"PluginSample\",\n            \"boot\":true,\n            \"force\":false,\n            \"foreground\":false,\n            \"packageName\":\"com.theta360.pluginsample\",\n            \"running\":false,\n            \"type\":\"extended\",\n            \"version\":\"1.0\"\n        }\n    ]\n},\n\"state\":\"done\"\n}\n\n\n\n\n\nNote that this command was changed from \ncamera._listApplications\n, which is now deprecated\n\n\n\n\nIn the example below, I am using \nRestlet Client, which is a browser-based Chrome tool similar to Postman.\n\n\nI am using THETA V firmware 1.20.1. This command may change in the future.  Use com.theta360.yourappname for the packageName. Note that in the example below, my package is called pluginsample.\n\n\n\n\nThis is the POST command:\n\n\nhttp://192.168.1.1/osc/commands/execute\n\n{\n    \"name\": \"camera._setPlugin\",\n    \"parameters\": {\n        \"packageName\": \"com.theta360.pluginsample\",\n        \"boot\": \"true\",\n        \"force\": \"false\"\n    }\n}\n\n\n\nNote that the command changed in firmware 1.20.1. The command \nwas previously \ncamera._setApplication\n and is deprecated, though it \nstill works in firmware 1.20.1.\n\n\nSave HTTP Test Scripts in Separate Tool\n\n\nAlthough you can use a curl script to switch plugins with the WiFi API,\nI find it easier to use a tool like \nRestlet Client to save my HTTP test scripts into a group. I can select an\nindividual test and run it with a push of a button. To switch plugins, I \nsaved a script for  \ncamera._setPlugin\n. You can get a list of plugins with \n\ncamera._listPlugins\n.\n\n\n\n\nIn addition to saving the HTTP test scripts, Restlet Client or Postman will show the\nJSON response in \npretty\n format automatically. With curl, you will need to\npipe the output to another tool to get \npretty print\n.\n\n\n\n\nUsing Standard Android Packages\n\n\nYou can download apks from many sites for testing things like \ncommunication protocol with Facebook Messenger or video transmission.\n\n\nI've been using this site with good results.\n\n\nhttps://apkpure.com/app\n\n\nFor example, I can send 360 images directly from the THETA V storage to Facebook Messenger.\nThe images are viewable in 360 by the recipient.\n\n\n\n\nEnabling WiFi for All Apps\n\n\nWith the keyboard enabled, you can now type in your password for your WiFi hotspot to connect to the Internet.\n\n\n\n\nConnect to WiFi and all your apps and plug-ins will be able to connect to the Internet.", 
            "title": "Workflow Tips"
        }, 
        {
            "location": "/workflow/#development-workflow-tips", 
            "text": "", 
            "title": "Development Workflow Tips"
        }, 
        {
            "location": "/workflow/#debugging", 
            "text": "", 
            "title": "Debugging"
        }, 
        {
            "location": "/workflow/#save-logcat-to-file-on-camera", 
            "text": "This is a typical debugging workflow:   Enter  adb shell  in terminal to enter the shell in the camera.  logcat   /sdcard/DCIM/log.txt  Reproduce issue, camera may reboot.  adb pull /sdcard/DCIM/log.txt  in terminal", 
            "title": "Save logcat to file on camera"
        }, 
        {
            "location": "/workflow/#view-logcat-on-workstation", 
            "text": "For some messages, you can also debug the THETA V with a USB \ncable and adb in real-time. The camera will \noperate in Plugin Mode while connected to adb. It's better to\nsave to save as explained above because the camera may lock or \nreboot when it encounters the bug and you'll lose the connection.   You will be able to get debug messages similar to the example below:     12-14 07:53:24.105  1171  1373 E TaskPersister: File error accessing recents directory (directory doesn't exist?).  Example debug output with the camera connected to my Linux computer with a USB cable \nand in plug-in mode.", 
            "title": "View logcat on workstation"
        }, 
        {
            "location": "/workflow/#set-active-plugin", 
            "text": "When you develop the plugin application, a companion mobile application can set the active plugin using the\nWiFi API of the camera. The Ricoh mobile application that\nmost of your users will also have can set the active plugin. For\ntesting, you can either use the Ricoh mobile app, build your own mobile app, or send a REST command\nusing an HTTP testing tool such as  curl   or  Postman .", 
            "title": "Set Active Plugin"
        }, 
        {
            "location": "/workflow/#show-list-of-plugins-with-api", 
            "text": "The POST command:  $ curl -X POST 192.168.1.1/osc/commands/execute --data '{\"name\":\"camera._listPlugins\"}' -H 'content-type: application/json'  The response  {\n\"name\":\"camera._listPlugins\",\n\"results\":{\n    \"plugins\":[\n        {\n            \"applicationName\":\"Remote Playback\",\n            \"boot\":false,\n            \"bootOptions\":\"\",\n            \"force\":false,\n            \"foreground\":false,\n            \"packageName\":\"com.theta.remoteplayback\",\n            \"running\":false,\n            \"type\":\"extended\",\n            \"version\":\"1.00.20171106144412\"\n        },\n        {\n            \"applicationName\":\"PluginSample\",\n            \"boot\":true,\n            \"force\":false,\n            \"foreground\":false,\n            \"packageName\":\"com.theta360.pluginsample\",\n            \"running\":false,\n            \"type\":\"extended\",\n            \"version\":\"1.0\"\n        }\n    ]\n},\n\"state\":\"done\"\n}   Note that this command was changed from  camera._listApplications , which is now deprecated   In the example below, I am using \nRestlet Client, which is a browser-based Chrome tool similar to Postman.  I am using THETA V firmware 1.20.1. This command may change in the future.  Use com.theta360.yourappname for the packageName. Note that in the example below, my package is called pluginsample.   This is the POST command:  http://192.168.1.1/osc/commands/execute\n\n{\n    \"name\": \"camera._setPlugin\",\n    \"parameters\": {\n        \"packageName\": \"com.theta360.pluginsample\",\n        \"boot\": \"true\",\n        \"force\": \"false\"\n    }\n}  Note that the command changed in firmware 1.20.1. The command \nwas previously  camera._setApplication  and is deprecated, though it \nstill works in firmware 1.20.1.", 
            "title": "Show List of Plugins With API"
        }, 
        {
            "location": "/workflow/#save-http-test-scripts-in-separate-tool", 
            "text": "Although you can use a curl script to switch plugins with the WiFi API,\nI find it easier to use a tool like \nRestlet Client to save my HTTP test scripts into a group. I can select an\nindividual test and run it with a push of a button. To switch plugins, I \nsaved a script for   camera._setPlugin . You can get a list of plugins with  camera._listPlugins .   In addition to saving the HTTP test scripts, Restlet Client or Postman will show the\nJSON response in  pretty  format automatically. With curl, you will need to\npipe the output to another tool to get  pretty print .", 
            "title": "Save HTTP Test Scripts in Separate Tool"
        }, 
        {
            "location": "/workflow/#using-standard-android-packages", 
            "text": "You can download apks from many sites for testing things like \ncommunication protocol with Facebook Messenger or video transmission.  I've been using this site with good results.  https://apkpure.com/app  For example, I can send 360 images directly from the THETA V storage to Facebook Messenger.\nThe images are viewable in 360 by the recipient.", 
            "title": "Using Standard Android Packages"
        }, 
        {
            "location": "/workflow/#enabling-wifi-for-all-apps", 
            "text": "With the keyboard enabled, you can now type in your password for your WiFi hotspot to connect to the Internet.   Connect to WiFi and all your apps and plug-ins will be able to connect to the Internet.", 
            "title": "Enabling WiFi for All Apps"
        }, 
        {
            "location": "/vysortips/", 
            "text": "Vysor Tips\n\n\nUsing Vysor From Linux or Other OS\n\n\nI've found the easiest way to Vysor on Linux is to use the \n\nVysor Chrome Extension\n in the Chrome web browser on Linux.\n\n\n\n\nOn Linux, you can also install Vysor as a desktop application with the information \nhere\n.\n\n\nThe basic process is shown below.\n\n\ngit clone https://github.com/koush/electron-chrome.git\ncd electron-chrome\nnpm install\n\n\n\nUsing the Chrome Store app id for Vysor:\n\n\nelectron --enable-logging . --app-id=gidgenkbbabolejbgbpnhbimgjbffefm\n\n\n\n\n\nFixing Flickering Problem on Certain NVIDIA Cards\n\n\nOn an old NVIDIA graphics card, I needed to disable flipping using the NVIDIA X Server Settings. I am using X11, not Wayland on Ubuntu 18.04.  You can check to see if you're running Wayland or X11 with this:\n\n\n$ echo $XDG_SESSION_TYPE\nx11", 
            "title": "Vysor Tips"
        }, 
        {
            "location": "/vysortips/#vysor-tips", 
            "text": "", 
            "title": "Vysor Tips"
        }, 
        {
            "location": "/vysortips/#using-vysor-from-linux-or-other-os", 
            "text": "I've found the easiest way to Vysor on Linux is to use the  Vysor Chrome Extension  in the Chrome web browser on Linux.   On Linux, you can also install Vysor as a desktop application with the information  here .  The basic process is shown below.  git clone https://github.com/koush/electron-chrome.git\ncd electron-chrome\nnpm install  Using the Chrome Store app id for Vysor:  electron --enable-logging . --app-id=gidgenkbbabolejbgbpnhbimgjbffefm", 
            "title": "Using Vysor From Linux or Other OS"
        }, 
        {
            "location": "/vysortips/#fixing-flickering-problem-on-certain-nvidia-cards", 
            "text": "On an old NVIDIA graphics card, I needed to disable flipping using the NVIDIA X Server Settings. I am using X11, not Wayland on Ubuntu 18.04.  You can check to see if you're running Wayland or X11 with this:  $ echo $XDG_SESSION_TYPE\nx11", 
            "title": "Fixing Flickering Problem on Certain NVIDIA Cards"
        }, 
        {
            "location": "/workflow/submit/", 
            "text": "Plug-in Partner Program Submission\n\n\nA list of \"warnings\" is \nhere\n. Please read the list closely.\n\n\nBeyond that, several issues have come up repeatedly. Here are some Tips when building your Plug-ins. Special thanks to Fream and HoloBuilder for adding useful information here.\n\n\nThe following are Tips to make sure the process goes quicker. We will add more as necessary.\n\n\nThe licenses.html File\n\n\nYou need to include any open source license information used by your plug-in in the apk file under \n\\assets\\licenses.html\n. No special format is required but expect users to be able to see it. The licenses.html file does not need to include the EULA, it's fine to just include the open source licenses info.\n\n\nNote: The /assets folder should be included in the .zip file, not just the RICOH SnapChamber (upload mechanism).\n\n\nYou can get license information using the Web API command \ncamera._getPluginLicense\n. \n\n\nThis is example of HTML file for license.html\n\n\nhtml\n\n\nhead\n\n   \nmeta http\u2010equiv=\"Content\u2010Type\" content=\"text/html; charset=windows\u20101252\"\n\n   \nstyle type=\"text/css\"\n\nbody { padding: 0; font\u2010family: sans\u2010serif; }\n   \n/style\n\n\n/head\n\n\nbody topmargin=\"0\" leftmargin=\"0\" rightmargin=\"0\" bottommargin=\"0\"\n\n\ndiv\n\n   \np\nThis plugin uses \nTYPE LICENSES FROM YOUR LIBRARIES\n licensed libraries\n/p\n\n\n/div\n\n\n/body\n\n\n/html\n\n\n\n\nYour Plug-in Build number\n\n\nThe format is major.minor.buildnumber, so it'll probably commonly be: 1.0.0\n\n\n\n\nMajor version - big changes in code\n\n\nMinor version - small changes in code, maybe one feature or something like that\n\n\nFixes version - bug fixes release, etc.\n\n\n\n\nLonger description of major.minor.buildnumber format here: https://semver.org\n\n\nPackageName issues\n\n\nTo make sure that your PackageName and your Plug-in name are the same, you need to be check several places.\n\n\nExamples stated here are for a plug-in called \"yourpluginname,\" with a company name called \"Oppkey,\" and a website \"theta360.guide\".\n\n\n\n\n\n\nApp level build gradle could have \napplicationId\n in defaultConfig closure - Example applicationId: \n\"guide.theta360.oppkey.yourpluginname\"\n\n\n\n\n\n\nIn the \n tag you have a \"package\" attribute - Example: package=\"guide.theta360.oppkey.yourpluginname\"\n\n\n\n\n\n\nIn the Manifest inside the application tag you have an attribute label - Example: \"Your Plug-in Name\" (spaces fine)\n\n\n\n\n\n\nFor distributing Android apps, \napplicationId\n is very important, because it overrides your package in the manifest. You can have different suffixes for your applicationId (.beta .debug, etc.).\n\n\nThis is important because \napplicationId\n (and therefore the package from the Manifest) is used by Google Play to identify your app.\n\n\nYou can set ANY label for your app.\n\n\nFor publishing it is important to have the proper \napplicationId\n which corresponds to the code package. The label should be the same as the plugin name.\n\n\nWhen you send your plug-in .zip file to RICOH, name your APK YourLabelWIthoutSpaces.apk, add 1.png...5.png files. You can attach your README.TXT to the .zip file.\n\n\nNAME OF ZIP WITH THOSE FILES IS = applicationID\nExample: guide.theta360.oppkey.yourpluginname.zip", 
            "title": "Plug-in Submission"
        }, 
        {
            "location": "/workflow/submit/#plug-in-partner-program-submission", 
            "text": "A list of \"warnings\" is  here . Please read the list closely.  Beyond that, several issues have come up repeatedly. Here are some Tips when building your Plug-ins. Special thanks to Fream and HoloBuilder for adding useful information here.  The following are Tips to make sure the process goes quicker. We will add more as necessary.", 
            "title": "Plug-in Partner Program Submission"
        }, 
        {
            "location": "/workflow/submit/#the-licenseshtml-file", 
            "text": "You need to include any open source license information used by your plug-in in the apk file under  \\assets\\licenses.html . No special format is required but expect users to be able to see it. The licenses.html file does not need to include the EULA, it's fine to just include the open source licenses info.  Note: The /assets folder should be included in the .zip file, not just the RICOH SnapChamber (upload mechanism).  You can get license information using the Web API command  camera._getPluginLicense .   This is example of HTML file for license.html  html  head \n    meta http\u2010equiv=\"Content\u2010Type\" content=\"text/html; charset=windows\u20101252\" \n    style type=\"text/css\" \nbody { padding: 0; font\u2010family: sans\u2010serif; }\n    /style  /head  body topmargin=\"0\" leftmargin=\"0\" rightmargin=\"0\" bottommargin=\"0\"  div \n    p This plugin uses  TYPE LICENSES FROM YOUR LIBRARIES  licensed libraries /p  /div  /body  /html", 
            "title": "The licenses.html File"
        }, 
        {
            "location": "/workflow/submit/#your-plug-in-build-number", 
            "text": "The format is major.minor.buildnumber, so it'll probably commonly be: 1.0.0   Major version - big changes in code  Minor version - small changes in code, maybe one feature or something like that  Fixes version - bug fixes release, etc.   Longer description of major.minor.buildnumber format here: https://semver.org", 
            "title": "Your Plug-in Build number"
        }, 
        {
            "location": "/workflow/submit/#packagename-issues", 
            "text": "To make sure that your PackageName and your Plug-in name are the same, you need to be check several places.  Examples stated here are for a plug-in called \"yourpluginname,\" with a company name called \"Oppkey,\" and a website \"theta360.guide\".    App level build gradle could have  applicationId  in defaultConfig closure - Example applicationId: \n\"guide.theta360.oppkey.yourpluginname\"    In the   tag you have a \"package\" attribute - Example: package=\"guide.theta360.oppkey.yourpluginname\"    In the Manifest inside the application tag you have an attribute label - Example: \"Your Plug-in Name\" (spaces fine)    For distributing Android apps,  applicationId  is very important, because it overrides your package in the manifest. You can have different suffixes for your applicationId (.beta .debug, etc.).  This is important because  applicationId  (and therefore the package from the Manifest) is used by Google Play to identify your app.  You can set ANY label for your app.  For publishing it is important to have the proper  applicationId  which corresponds to the code package. The label should be the same as the plugin name.  When you send your plug-in .zip file to RICOH, name your APK YourLabelWIthoutSpaces.apk, add 1.png...5.png files. You can attach your README.TXT to the .zip file.  NAME OF ZIP WITH THOSE FILES IS = applicationID\nExample: guide.theta360.oppkey.yourpluginname.zip", 
            "title": "PackageName issues"
        }, 
        {
            "location": "/troubleshoot/", 
            "text": "Troubleshooting\n\n\n\n\nEntering/Exiting Plug-in Mode on the camera\n\n\nUser presses Mode Button to enter and exit Plug-in Mode; Blue LED indicates regular Camera Mode, White LED indicates Plug-in Mode engaged - Note: exiting Plug-in Mode triggers Red LED to flash and disengage sound to play\n\n\n\n\n\n\nForce power down\n\n\nPress WLAN + POWER buttons for 10 seconds\n\n\n\n\n\n\nWLAN reset\n\n\nPress WLAN button for 10 seconds\n\n\n\n\n\n\nShutdown versus Sleep mode\n\n\nPress and hold power button 3-4 seconds to shutdown, indicated with three slow blinks of red LED - Pressing power button quickly will engage Sleep Mode, no LEDs\n\n\n\n\n\n\nBattery Status\n\n\nNo display on Camera, requires using THETA mobile app or REST API command. On Windows, you can \n right-click on the THETA icon in File Explorer to see the battery level.\n\n\n\n\n\n\n\n\n\n\nTop 5 Most Useful Button Combinations for RICOH THETA V Developers", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshoot/#troubleshooting", 
            "text": "Entering/Exiting Plug-in Mode on the camera  User presses Mode Button to enter and exit Plug-in Mode; Blue LED indicates regular Camera Mode, White LED indicates Plug-in Mode engaged - Note: exiting Plug-in Mode triggers Red LED to flash and disengage sound to play    Force power down  Press WLAN + POWER buttons for 10 seconds    WLAN reset  Press WLAN button for 10 seconds    Shutdown versus Sleep mode  Press and hold power button 3-4 seconds to shutdown, indicated with three slow blinks of red LED - Pressing power button quickly will engage Sleep Mode, no LEDs    Battery Status  No display on Camera, requires using THETA mobile app or REST API command. On Windows, you can \n right-click on the THETA icon in File Explorer to see the battery level.      Top 5 Most Useful Button Combinations for RICOH THETA V Developers", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/custom/", 
            "text": "Development Tutorials\n\n\nOverview\n\n\nYour primary way to control the camera is with the Android Camera class. Although this API was\ndeprecated in level 21, it still works. Make sure you use the older Camera class and not\nthe newer camera2 API.\n\n\nUse the offiical Android API documentation as your main reference.\n\n\nhttps://developer.android.com/reference/android/hardware/Camera.html\n\n\nThere are a set of THETA features that are not covered by the Android \n\nCamera\n\nAPI. These are covered by using \n\nCamera.Parameters\n\n\nWe have prepared four tutorials for you to get started.\n\n\n\n\n\n\n\n\nTutorial\n\n\nLearning Objective\n\n\nBenefit of Learning\n\n\n\n\n\n\n\n\n\n\nVysor\n\n\nLearn techniques to to test plug-in and related technologies\n\n\nTest plug-in without mobile phone display\n\n\n\n\n\n\nLED Color\n\n\nUnderstand structure of plug-in library. Control LED color.\n\n\nBe able to use plugin library.\n\n\n\n\n\n\nLED Communication\n\n\nLearn how to communicate status of app or camera to users using the LEDs.\n\n\nCommunicate to users without mobile phone display\n\n\n\n\n\n\nCamera Buttons\n\n\nLearn to use camera buttons to get user input.\n\n\nGet user input without mobile phone touchscreen\n\n\n\n\n\n\n\n\nNext steps\n\n\nYou can now go back to the main Android developer documentation on the Android site to \nadd in standard Android functionality. You can also  test different libraries \nfor network and image processing.  The next section of this guide, \n\nCustom Development Tips\n,\nwill show you how to adjust the stitching of the THETA images. We'll update this\ndocument regularly.  If you have questions, the \n\ncommunity\n is here to help.", 
            "title": "Tutorials Overview"
        }, 
        {
            "location": "/custom/#development-tutorials", 
            "text": "", 
            "title": "Development Tutorials"
        }, 
        {
            "location": "/custom/#overview", 
            "text": "Your primary way to control the camera is with the Android Camera class. Although this API was\ndeprecated in level 21, it still works. Make sure you use the older Camera class and not\nthe newer camera2 API.  Use the offiical Android API documentation as your main reference.  https://developer.android.com/reference/android/hardware/Camera.html  There are a set of THETA features that are not covered by the Android  Camera \nAPI. These are covered by using  Camera.Parameters  We have prepared four tutorials for you to get started.     Tutorial  Learning Objective  Benefit of Learning      Vysor  Learn techniques to to test plug-in and related technologies  Test plug-in without mobile phone display    LED Color  Understand structure of plug-in library. Control LED color.  Be able to use plugin library.    LED Communication  Learn how to communicate status of app or camera to users using the LEDs.  Communicate to users without mobile phone display    Camera Buttons  Learn to use camera buttons to get user input.  Get user input without mobile phone touchscreen", 
            "title": "Overview"
        }, 
        {
            "location": "/custom/#next-steps", 
            "text": "You can now go back to the main Android developer documentation on the Android site to \nadd in standard Android functionality. You can also  test different libraries \nfor network and image processing.  The next section of this guide,  Custom Development Tips ,\nwill show you how to adjust the stitching of the THETA images. We'll update this\ndocument regularly.  If you have questions, the  community  is here to help.", 
            "title": "Next steps"
        }, 
        {
            "location": "/tutorialvysor/", 
            "text": "Vysor Tutorial\n\n\nVysor is a great tool to provide quick feedback on how your app is doing. Vysor \nwill display a virtual screen from the THETA V to your desktop workstation. Vysor\nis useful for the following development processes:\n\n\n\n\nverify plug-in was installed\n\n\nset plug-in permissions\n\n\nconnect camera to Internet for network testing\n\n\nverify plug-in launches\n\n\ntest functionality of third-party Android apps to see if it runs on the THETA V before building your own app\n\n\nquickly view and send pictures directly from the camera to test functionality\n\n\n\n\n1 Install Vysor\n\n\nGo to  \nhttps://www.vysor.io/\n \nand install Vysor.\n\n\n\n\n2 Select RICOH THETA_V as device\n\n\nAfter starting Vysor, you will be able to choose your device, \nRICOH THETA_V\n.  Press \nView\n.\n\n\n\n\nVysor will start up.\n\n\n\n\n3 Review Installed Apps and Plug-ins\n\n\nClick on the home button.\n\n\n\n\nAny launcher will work. I'm using the Snapdragon Launcher.\n\n\n\n\nYou will see all the apps.\n\n\n\n\n4 Review Plug-in Permissions\n\n\nGo to App Settings\n\n\n\n\nWhen developing your custom app, you may need to set Permissions for \nStorage\n and \nCamera\n.\n\n\n\n\nThe Plugin Application in the SDK has the permissions set automatically.\n\n\n5 Use Vysor to Launch Apps for Quick Testing\n\n\nClick on your plug-in inside of Vysor to launch your app directly in Vysor\nfor quick testing.\n\n\n\n\n6 Use Vysor to Veriify App Launching\n\n\nWith your camera connected to Vysor, push the physical \nmode\n button on your camera to put the camera into\nplug-in mode. When the camera goes into plug-in mode, it will automatically\nlaunch the active plug-in. You can see this visually on Vysor.\n\n\n7 Use Vysor to Verify Plugin Installation\n\n\nVysor will show your installed plug-ins as icons. This is a quick\nway to verify that your plug-in intalled correctly.\n\n\nYou can install multiple plugins into the THETA V. In the example below,\nI'm using Vysor to verify that I installed my new plugin \n\nConstructionPlugin\n in addition to the \nPluginSample\n I installed\nearlier.\n\n\n\n\nPrior to selecting with my new \nConstructionPlugin\n with the API, I set\nthe permissions with Vysor. Settings -\n Apps -\n YourAppName\n\n\n\n\n8 Verify Image File Names with Vysor\n\n\nIn order to download the picture with adb, you first need to find out the exact filename. You can use Vysor to find the filename.\n\n\nGo into File Manager\n\n\n\n\nDown into DCIM\n\n\n\n\nDown into 100RICOH\n\n\n\n\nIf you have a lot of images on the camera, you may need to scroll down to the bottom of the list.\n\n\n\n\nThere's your filename, the newest image. In this case, it's R0010047.JPG\n\n\nThen use adb pull to download the picture to your local machine   \n\n\n$ adb pull /sdcard/DCIM/100RICOH/R0010047.JPG\n/sdcard/DCIM/100RICOH/R0010047.JPG: 1 file pulled. 21.2 MB/s (2790527 bytes in 0.126s)\n\n\n\n9 Use Vysor to Configure WiFi and Test Apps\n\n\nYou can use Vysor to connect your camera to the Internet, similar to connecting a normal\nAndroid phone to the Internet. The only tricky part is to enable the keyboard and back button on Vysor.\n\n\n9.1 Disable the THETA V camera process\n\n\nThe THETA V camera process interferes with the keyboard and backbutton.\nTo use the keyboard and back button, you need to stop the camera process.\n\n\nThe video \nGetting Vysor Back Button to Work - RICOH THETA Development\n \nshows the setup process.\n\n\nThe steps are also explained below.\n\n\n9.1.1 Connect your THETA V to Vysor\n\n\n\n\n9.1.2 Go to settings\n\n\nExpand apps.\n\n\n\n\nGo into settings.\n\n\n\n\n9.1.3 Go to Developer options\n\n\nIf you don't have \nDeveloper options\n visible on your camera, you may need to \nenable developer options\n by going to \nAbout phone\n and \ntapping Build number 7 times.\n\n\n\n\n9.1.4 Go to Running services\n\n\nAccess \nRunning services\n.\n\n\n\n\n9.1.5 Select the \nRICOH THETA V\n process\n\n\n\n\n9.1.6 Locate the \nCameraService\n\n\n\n\n9.1.7 Stop the service\n\n\nBe bold.\n\n\n\n\n9.1.8 Test the keyboard\n\n\n\n\n9.1.9 Test the back button", 
            "title": "Tutorial - Vysor"
        }, 
        {
            "location": "/tutorialvysor/#vysor-tutorial", 
            "text": "Vysor is a great tool to provide quick feedback on how your app is doing. Vysor \nwill display a virtual screen from the THETA V to your desktop workstation. Vysor\nis useful for the following development processes:   verify plug-in was installed  set plug-in permissions  connect camera to Internet for network testing  verify plug-in launches  test functionality of third-party Android apps to see if it runs on the THETA V before building your own app  quickly view and send pictures directly from the camera to test functionality", 
            "title": "Vysor Tutorial"
        }, 
        {
            "location": "/tutorialvysor/#1-install-vysor", 
            "text": "Go to   https://www.vysor.io/  \nand install Vysor.", 
            "title": "1 Install Vysor"
        }, 
        {
            "location": "/tutorialvysor/#2-select-ricoh-theta_v-as-device", 
            "text": "After starting Vysor, you will be able to choose your device,  RICOH THETA_V .  Press  View .   Vysor will start up.", 
            "title": "2 Select RICOH THETA_V as device"
        }, 
        {
            "location": "/tutorialvysor/#3-review-installed-apps-and-plug-ins", 
            "text": "Click on the home button.   Any launcher will work. I'm using the Snapdragon Launcher.   You will see all the apps.", 
            "title": "3 Review Installed Apps and Plug-ins"
        }, 
        {
            "location": "/tutorialvysor/#4-review-plug-in-permissions", 
            "text": "Go to App Settings   When developing your custom app, you may need to set Permissions for  Storage  and  Camera .   The Plugin Application in the SDK has the permissions set automatically.", 
            "title": "4 Review Plug-in Permissions"
        }, 
        {
            "location": "/tutorialvysor/#5-use-vysor-to-launch-apps-for-quick-testing", 
            "text": "Click on your plug-in inside of Vysor to launch your app directly in Vysor\nfor quick testing.", 
            "title": "5 Use Vysor to Launch Apps for Quick Testing"
        }, 
        {
            "location": "/tutorialvysor/#6-use-vysor-to-veriify-app-launching", 
            "text": "With your camera connected to Vysor, push the physical  mode  button on your camera to put the camera into\nplug-in mode. When the camera goes into plug-in mode, it will automatically\nlaunch the active plug-in. You can see this visually on Vysor.", 
            "title": "6 Use Vysor to Veriify App Launching"
        }, 
        {
            "location": "/tutorialvysor/#7-use-vysor-to-verify-plugin-installation", 
            "text": "Vysor will show your installed plug-ins as icons. This is a quick\nway to verify that your plug-in intalled correctly.  You can install multiple plugins into the THETA V. In the example below,\nI'm using Vysor to verify that I installed my new plugin  ConstructionPlugin  in addition to the  PluginSample  I installed\nearlier.   Prior to selecting with my new  ConstructionPlugin  with the API, I set\nthe permissions with Vysor. Settings -  Apps -  YourAppName", 
            "title": "7 Use Vysor to Verify Plugin Installation"
        }, 
        {
            "location": "/tutorialvysor/#8-verify-image-file-names-with-vysor", 
            "text": "In order to download the picture with adb, you first need to find out the exact filename. You can use Vysor to find the filename.  Go into File Manager   Down into DCIM   Down into 100RICOH   If you have a lot of images on the camera, you may need to scroll down to the bottom of the list.   There's your filename, the newest image. In this case, it's R0010047.JPG  Then use adb pull to download the picture to your local machine     $ adb pull /sdcard/DCIM/100RICOH/R0010047.JPG\n/sdcard/DCIM/100RICOH/R0010047.JPG: 1 file pulled. 21.2 MB/s (2790527 bytes in 0.126s)", 
            "title": "8 Verify Image File Names with Vysor"
        }, 
        {
            "location": "/tutorialvysor/#9-use-vysor-to-configure-wifi-and-test-apps", 
            "text": "You can use Vysor to connect your camera to the Internet, similar to connecting a normal\nAndroid phone to the Internet. The only tricky part is to enable the keyboard and back button on Vysor.", 
            "title": "9 Use Vysor to Configure WiFi and Test Apps"
        }, 
        {
            "location": "/tutorialvysor/#91-disable-the-theta-v-camera-process", 
            "text": "The THETA V camera process interferes with the keyboard and backbutton.\nTo use the keyboard and back button, you need to stop the camera process.  The video  Getting Vysor Back Button to Work - RICOH THETA Development  \nshows the setup process.  The steps are also explained below.", 
            "title": "9.1 Disable the THETA V camera process"
        }, 
        {
            "location": "/tutorialvysor/#911-connect-your-theta-v-to-vysor", 
            "text": "", 
            "title": "9.1.1 Connect your THETA V to Vysor"
        }, 
        {
            "location": "/tutorialvysor/#912-go-to-settings", 
            "text": "Expand apps.   Go into settings.", 
            "title": "9.1.2 Go to settings"
        }, 
        {
            "location": "/tutorialvysor/#913-go-to-developer-options", 
            "text": "If you don't have  Developer options  visible on your camera, you may need to  enable developer options  by going to  About phone  and \ntapping Build number 7 times.", 
            "title": "9.1.3 Go to Developer options"
        }, 
        {
            "location": "/tutorialvysor/#914-go-to-running-services", 
            "text": "Access  Running services .", 
            "title": "9.1.4 Go to Running services"
        }, 
        {
            "location": "/tutorialvysor/#915-select-the-ricoh-theta-v-process", 
            "text": "", 
            "title": "9.1.5 Select the RICOH THETA V process"
        }, 
        {
            "location": "/tutorialvysor/#916-locate-the-cameraservice", 
            "text": "", 
            "title": "9.1.6 Locate the CameraService"
        }, 
        {
            "location": "/tutorialvysor/#917-stop-the-service", 
            "text": "Be bold.", 
            "title": "9.1.7 Stop the service"
        }, 
        {
            "location": "/tutorialvysor/#918-test-the-keyboard", 
            "text": "", 
            "title": "9.1.8 Test the keyboard"
        }, 
        {
            "location": "/tutorialvysor/#919-test-the-back-button", 
            "text": "", 
            "title": "9.1.9 Test the back button"
        }, 
        {
            "location": "/tutorialcolor/", 
            "text": "LED Color Tutorial\n\n\n1 First steps with pluginlibrary\n\n\nOpen Android Studio. Identify the available colors. In \npluginlibrary\n, the LED colors are defined in \nLedColor\n. Open\nthe file to inspect the available colors.\n\n\npluginlibrary -\n java -\n com.theta360pluginlibrary -\n values -\n LedColor\n\n\n\n\n\n2 Identify LED Colors\n\n\nYou'll only be able to change the color for the WiFi LED on the front of the camera.  Take note of the color\nyou want to use. This tutorial will use MAGENTA.\n\n\nRED(\"red\", 0b001),\nGREEN(\"green\", 0b010),\nBLUE(\"blue\", 0b100),\nCYAN(\"cyan\", 0b110),\nMAGENTA(\"magenta\", 0b101),\nYELLOW(\"yellow\", 0b011),\nWHITE(\"white\", 0b111),;\n\n\n\n3 Identify Camera LED Targets\n\n\nThe camera has 8 LEDs. You can control LEDs 3 through 8.\nThis tutorial will focus on LED3, the WiFi LED. You can try different LEDs\non your own. \n\n\n\n\n4 Review LED Example in SDK.\n\n\nIn \nMainActivity\n, there is an example that blinks the WiFi LED.\n\n\napp -\n java -\n com.theta360.pluginapplication -\n MainActivity\n\n\n\n\n\nLook for this code section.\n\n\npublic void onKeyUp(int keyCode, KeyEvent event) {\n    /**\n        * You can control the LED of the camera.\n        * It is possible to change the way of lighting, the cycle of blinking, the color of light emission.\n        * Light emitting color can be changed only LED3.\n        */\n    notificationLedBlink(LedTarget.LED3, LedColor.BLUE, 1000);\n\n\n\nYou can change the target, color, and blink rate. The higher the number, the slower the rate.\nThe example below will use a delay of 300 between blinks to cause the LED to blink faster.\n\n\n5 Change LED color and blink rate\n\n\nThe example below will flash LED3, the WiFi LED, faster and display\na magenta color.  Edit \nMainActivity\n as follows.\n\n\n    notificationLedBlink(LedTarget.LED3, LedColor.MAGENTA, 300);\n\n\n\n6 Save changes\n\n\nSelect \nSave all\n from the \nFile\n menu. \n\n\n\n\n7 Build apk\n\n\n\n\n8 Identify location of apk\n\n\n\n\ntheta-plugin-sdk \n app \n build \n outputs \n apk \n debug \n app-debug.apk\n\n\n\n9 Check installation setup\n\n\nWe will use adb to install the apk into your THETA V. Confirm that you have the following set up:\n\n\n\n\nYour THETA V should be connected to your computer with a USB cable.\n\n\nYou must be using an unlocked THETA V that is in \nDeveloper Mode\n\n\nadb needs to be in your PATH\n\n\n\n\nIf you are unsure about any of the steps above, refer to the previous sections. You can\nalso ask questions in the community at \nhttp://plugin.community.theta360.guide\n.\nIf you are at a workshop, please raise your hand and someone will assist you.\n\n\n10 cd into apk directory\n\n\nChange directory into the same directory that your apk is in.\n\n\n\n\n11 Use adb to install the apk into your camera\n\n\nIn the directory that your apk is in, run the following command:\n\n\nadb install -r app-debug.apk\n\n\n\nYou should see  \nSuccess\n. If your daemon is not running, you will see message that it is starting.\n\n\n\n\n12 Reboot camera\n\n\nHold the camera power button down for 4 seconds to shutdown the camera. You will see red LEDs flash.\nIf you do not hold the power button down for 4 seconds, the camera will go into sleep mode. Once the \ncamera is shutdown, turn on the camera again by pressing the power button.\n\n\n13 Put camera into plug-in mode\n\n\nPress the mode button for longer than 2 seconds. LED2 will turn white.\n\n\n14 Verify LED is blinking\n\n\nAfter placing the camera into plug-in mode, you should see LED3 blinking with a magenta color.\n\n\n\n\nCongratulations!  You've just successfully built and installed your first custom plug-in. You are now\na plug-in developer!\n\n\n15 Troubleshooting\n\n\nProblem: \nadb install -r app-debug.apk\n hangs\n\n\nUnplug the USB cable from your computer and try again.\n\n\nProblem: Install succeeds, but nothing happens\n\n\n\n\nUse the RICOH mobile app or the API to verify that plugin application is selected as the active plugin\n\n\nUse Vysor to uninstall old plug-in\n\n\nUse Vysor to start the plug-in. Click on the plug-in icon in Vysor with the same process you would use to launch\na mobile phone app", 
            "title": "Tutorial - LED Color"
        }, 
        {
            "location": "/tutorialcolor/#led-color-tutorial", 
            "text": "", 
            "title": "LED Color Tutorial"
        }, 
        {
            "location": "/tutorialcolor/#1-first-steps-with-pluginlibrary", 
            "text": "Open Android Studio. Identify the available colors. In  pluginlibrary , the LED colors are defined in  LedColor . Open\nthe file to inspect the available colors.  pluginlibrary -  java -  com.theta360pluginlibrary -  values -  LedColor", 
            "title": "1 First steps with pluginlibrary"
        }, 
        {
            "location": "/tutorialcolor/#2-identify-led-colors", 
            "text": "You'll only be able to change the color for the WiFi LED on the front of the camera.  Take note of the color\nyou want to use. This tutorial will use MAGENTA.  RED(\"red\", 0b001),\nGREEN(\"green\", 0b010),\nBLUE(\"blue\", 0b100),\nCYAN(\"cyan\", 0b110),\nMAGENTA(\"magenta\", 0b101),\nYELLOW(\"yellow\", 0b011),\nWHITE(\"white\", 0b111),;", 
            "title": "2 Identify LED Colors"
        }, 
        {
            "location": "/tutorialcolor/#3-identify-camera-led-targets", 
            "text": "The camera has 8 LEDs. You can control LEDs 3 through 8.\nThis tutorial will focus on LED3, the WiFi LED. You can try different LEDs\non your own.", 
            "title": "3 Identify Camera LED Targets"
        }, 
        {
            "location": "/tutorialcolor/#4-review-led-example-in-sdk", 
            "text": "In  MainActivity , there is an example that blinks the WiFi LED.  app -  java -  com.theta360.pluginapplication -  MainActivity   Look for this code section.  public void onKeyUp(int keyCode, KeyEvent event) {\n    /**\n        * You can control the LED of the camera.\n        * It is possible to change the way of lighting, the cycle of blinking, the color of light emission.\n        * Light emitting color can be changed only LED3.\n        */\n    notificationLedBlink(LedTarget.LED3, LedColor.BLUE, 1000);  You can change the target, color, and blink rate. The higher the number, the slower the rate.\nThe example below will use a delay of 300 between blinks to cause the LED to blink faster.", 
            "title": "4 Review LED Example in SDK."
        }, 
        {
            "location": "/tutorialcolor/#5-change-led-color-and-blink-rate", 
            "text": "The example below will flash LED3, the WiFi LED, faster and display\na magenta color.  Edit  MainActivity  as follows.      notificationLedBlink(LedTarget.LED3, LedColor.MAGENTA, 300);", 
            "title": "5 Change LED color and blink rate"
        }, 
        {
            "location": "/tutorialcolor/#6-save-changes", 
            "text": "Select  Save all  from the  File  menu.", 
            "title": "6 Save changes"
        }, 
        {
            "location": "/tutorialcolor/#7-build-apk", 
            "text": "", 
            "title": "7 Build apk"
        }, 
        {
            "location": "/tutorialcolor/#8-identify-location-of-apk", 
            "text": "theta-plugin-sdk   app   build   outputs   apk   debug   app-debug.apk", 
            "title": "8 Identify location of apk"
        }, 
        {
            "location": "/tutorialcolor/#9-check-installation-setup", 
            "text": "We will use adb to install the apk into your THETA V. Confirm that you have the following set up:   Your THETA V should be connected to your computer with a USB cable.  You must be using an unlocked THETA V that is in  Developer Mode  adb needs to be in your PATH   If you are unsure about any of the steps above, refer to the previous sections. You can\nalso ask questions in the community at  http://plugin.community.theta360.guide .\nIf you are at a workshop, please raise your hand and someone will assist you.", 
            "title": "9 Check installation setup"
        }, 
        {
            "location": "/tutorialcolor/#10-cd-into-apk-directory", 
            "text": "Change directory into the same directory that your apk is in.", 
            "title": "10 cd into apk directory"
        }, 
        {
            "location": "/tutorialcolor/#11-use-adb-to-install-the-apk-into-your-camera", 
            "text": "In the directory that your apk is in, run the following command:  adb install -r app-debug.apk  You should see   Success . If your daemon is not running, you will see message that it is starting.", 
            "title": "11 Use adb to install the apk into your camera"
        }, 
        {
            "location": "/tutorialcolor/#12-reboot-camera", 
            "text": "Hold the camera power button down for 4 seconds to shutdown the camera. You will see red LEDs flash.\nIf you do not hold the power button down for 4 seconds, the camera will go into sleep mode. Once the \ncamera is shutdown, turn on the camera again by pressing the power button.", 
            "title": "12 Reboot camera"
        }, 
        {
            "location": "/tutorialcolor/#13-put-camera-into-plug-in-mode", 
            "text": "Press the mode button for longer than 2 seconds. LED2 will turn white.", 
            "title": "13 Put camera into plug-in mode"
        }, 
        {
            "location": "/tutorialcolor/#14-verify-led-is-blinking", 
            "text": "After placing the camera into plug-in mode, you should see LED3 blinking with a magenta color.   Congratulations!  You've just successfully built and installed your first custom plug-in. You are now\na plug-in developer!", 
            "title": "14 Verify LED is blinking"
        }, 
        {
            "location": "/tutorialcolor/#15-troubleshooting", 
            "text": "", 
            "title": "15 Troubleshooting"
        }, 
        {
            "location": "/tutorialcolor/#problem-adb-install-r-app-debugapk-hangs", 
            "text": "Unplug the USB cable from your computer and try again.", 
            "title": "Problem: adb install -r app-debug.apk hangs"
        }, 
        {
            "location": "/tutorialcolor/#problem-install-succeeds-but-nothing-happens", 
            "text": "Use the RICOH mobile app or the API to verify that plugin application is selected as the active plugin  Use Vysor to uninstall old plug-in  Use Vysor to start the plug-in. Click on the plug-in icon in Vysor with the same process you would use to launch\na mobile phone app", 
            "title": "Problem: Install succeeds, but nothing happens"
        }, 
        {
            "location": "/tutorialcommunication/", 
            "text": "LED Communication\n\n\nAs the RICOH THETA does not have a screen, your Android plug-in will need to use\nLEDs and sound as the primary way to communicate the status of your application\nto the user.\n\n\nThere are three variables you can control.\n\n\n\n\nColor of LED3\n\n\nWhich LED\n\n\nLED blink rate\n\n\n\n\nBy varying the location, speed and color of the camera LEDs, you can communicate\nthe status of your plug-in to the user.\n\n\nIn the the next example, we will blink LEDs 4, 5, 6, 7, and 8. We will not be \ncontrolling the color as only the color for LED3 can be controlled. \n\n\n1 Edit MainActivity in Android Studio\n\n\nGo back to \nMainActivity\n. Comment out the line for LED3 and add the following lines to test the other \nLEDs.\n\n\nnotificationLedBlink(LedTarget.LED4, LedColor.BLUE, 300);\nnotificationLedBlink(LedTarget.LED5, LedColor.BLUE, 300);\n\nnotificationLedBlink(LedTarget.LED6, LedColor.BLUE, 300);\nnotificationLedBlink(LedTarget.LED7, LedColor.RED, 300);\nnotificationLedBlink(LedTarget.LED8, LedColor.RED, 300);\n\n\n\n\n\n2 Build, Install, Reboot\n\n\nFollow the same process described in the section above.\n\n\n\n\nBuild the apk from within Android Studio\n\n\nFind the location of the APK\n\n\ncd into that directory\n\n\ninstall the apk with \nadb install -r app-debug.apk\n\n\nreboot camera\n\n\n\n\n3 Test\n\n\nPress the lower mode button for longer than 2 seconds to put the camera into \nplug-in mode. \n\n\nYou should see all LEDs 4-8 blinking with a delay of 300ms between blinks.\n\n\n\n\nCongratulations!  You've just finished your second custom plug-in for the RICOH \nTHETA V.", 
            "title": "Tutorial - LED Communication"
        }, 
        {
            "location": "/tutorialcommunication/#led-communication", 
            "text": "As the RICOH THETA does not have a screen, your Android plug-in will need to use\nLEDs and sound as the primary way to communicate the status of your application\nto the user.  There are three variables you can control.   Color of LED3  Which LED  LED blink rate   By varying the location, speed and color of the camera LEDs, you can communicate\nthe status of your plug-in to the user.  In the the next example, we will blink LEDs 4, 5, 6, 7, and 8. We will not be \ncontrolling the color as only the color for LED3 can be controlled.", 
            "title": "LED Communication"
        }, 
        {
            "location": "/tutorialcommunication/#1-edit-mainactivity-in-android-studio", 
            "text": "Go back to  MainActivity . Comment out the line for LED3 and add the following lines to test the other \nLEDs.  notificationLedBlink(LedTarget.LED4, LedColor.BLUE, 300);\nnotificationLedBlink(LedTarget.LED5, LedColor.BLUE, 300);\n\nnotificationLedBlink(LedTarget.LED6, LedColor.BLUE, 300);\nnotificationLedBlink(LedTarget.LED7, LedColor.RED, 300);\nnotificationLedBlink(LedTarget.LED8, LedColor.RED, 300);", 
            "title": "1 Edit MainActivity in Android Studio"
        }, 
        {
            "location": "/tutorialcommunication/#2-build-install-reboot", 
            "text": "Follow the same process described in the section above.   Build the apk from within Android Studio  Find the location of the APK  cd into that directory  install the apk with  adb install -r app-debug.apk  reboot camera", 
            "title": "2 Build, Install, Reboot"
        }, 
        {
            "location": "/tutorialcommunication/#3-test", 
            "text": "Press the lower mode button for longer than 2 seconds to put the camera into \nplug-in mode.   You should see all LEDs 4-8 blinking with a delay of 300ms between blinks.   Congratulations!  You've just finished your second custom plug-in for the RICOH \nTHETA V.", 
            "title": "3 Test"
        }, 
        {
            "location": "/tutorialbutton/", 
            "text": "Camera Buttons Tutorial\n\n\nIn the next example, we'll control the buttons of the camera.\n\n\n1 Inspect pluginlibrary\n\n\nFrom inside of Android Studio, go back to pluginlibrary. It is part of the SDK.\nLook for the \nKeyReceiver\n file.\n\n\n\n\nIn the KeyReceiver subclass of BroadcastReceiver, you can see that the three usable \nbuttons are defined as constants.\n\n\npublic class KeyReceiver extends BroadcastReceiver {\n    public static final int KEYCODE_CAMERA = 27;\n    public static final int KEYCODE_MEDIA_RECORD = 130;\n    public static final int KEYCODE_WLAN_ON_OFF = 284;\n\n    public static final String ACTION_KEY_DOWN = \"com.theta360.plugin.ACTION_KEY_DOWN\";\n    public static final String ACTION_KEY_UP = \"com.theta360.plugin.ACTION_KEY_UP\";\n    private static final String KEY_CODE = \"keyCode\";\n    private static final String KEY_EVENT = \"KeyEvent\";\n\n\n\n2 Locate buttons on camera\n\n\nThere are three buttons you can map:\n\n\n\n\n\n\n\n\nButton Common Name\n\n\nName in Library\n\n\nCode\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\nWiFi\n\n\nKEYCODE_WLAN_ON_OFF\n\n\n284\n\n\nside middle\n\n\n\n\n\n\nMode\n\n\nKEYCODE_MEDIA_RECORD\n\n\n130\n\n\nside bottom\n\n\n\n\n\n\nShutter\n\n\nKEYCODE_CAMERA\n\n\n27\n\n\nfront\n\n\n\n\n\n\n\n\nTwo of the buttons are on the side of the camera, below the power button. The third\nbutton is on the front of the camera. It is the big \nshutter\n button.\n\n\n3 Open \nMainActivity\n\n\nIn Android Studio, go back to \nMainActivity\n and look for the \nonKeyDown\n method.\n\n\nIn \nMainActivity.java\n, there is an example of using the \nkeyCode\n.\n\n\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    // Set a callback when a button operation event is acquired.\n    setKeyCallback(new KeyCallback() {\n        @Override\n        public void onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n                /*\n                 * To take a static picture, use the takePicture method.\n                 * You can receive a fileUrl of the static picture in the callback.\n                 */\n                new TakePictureTask(mTakePictureTaskCallback).execute();\n            }\n        }\n\n\n\n4 Map takePicture to Middle Side Button\n\n\nAs a simple test, we will map the middle side or \nwifi\n button to take a picture. \nIf you forget the constant name, you can use Android Studio code completion to find it.\n\n\n\n\n5 Build, install, test\n\n\nFollow these steps:\n\n\n\n\nbuild the apk from inside of Android Studio\n\n\ninstall it with adb\n\n\nreboot camera\n\n\nput camera into plug-in mode\n\n\ntest it on the camera by pressing the middle button on the side of the camera", 
            "title": "Tutorial - Camera Buttons"
        }, 
        {
            "location": "/tutorialbutton/#camera-buttons-tutorial", 
            "text": "In the next example, we'll control the buttons of the camera.", 
            "title": "Camera Buttons Tutorial"
        }, 
        {
            "location": "/tutorialbutton/#1-inspect-pluginlibrary", 
            "text": "From inside of Android Studio, go back to pluginlibrary. It is part of the SDK.\nLook for the  KeyReceiver  file.   In the KeyReceiver subclass of BroadcastReceiver, you can see that the three usable \nbuttons are defined as constants.  public class KeyReceiver extends BroadcastReceiver {\n    public static final int KEYCODE_CAMERA = 27;\n    public static final int KEYCODE_MEDIA_RECORD = 130;\n    public static final int KEYCODE_WLAN_ON_OFF = 284;\n\n    public static final String ACTION_KEY_DOWN = \"com.theta360.plugin.ACTION_KEY_DOWN\";\n    public static final String ACTION_KEY_UP = \"com.theta360.plugin.ACTION_KEY_UP\";\n    private static final String KEY_CODE = \"keyCode\";\n    private static final String KEY_EVENT = \"KeyEvent\";", 
            "title": "1 Inspect pluginlibrary"
        }, 
        {
            "location": "/tutorialbutton/#2-locate-buttons-on-camera", 
            "text": "There are three buttons you can map:     Button Common Name  Name in Library  Code  Location      WiFi  KEYCODE_WLAN_ON_OFF  284  side middle    Mode  KEYCODE_MEDIA_RECORD  130  side bottom    Shutter  KEYCODE_CAMERA  27  front     Two of the buttons are on the side of the camera, below the power button. The third\nbutton is on the front of the camera. It is the big  shutter  button.", 
            "title": "2 Locate buttons on camera"
        }, 
        {
            "location": "/tutorialbutton/#3-open-mainactivity", 
            "text": "In Android Studio, go back to  MainActivity  and look for the  onKeyDown  method.  In  MainActivity.java , there is an example of using the  keyCode .  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    // Set a callback when a button operation event is acquired.\n    setKeyCallback(new KeyCallback() {\n        @Override\n        public void onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n                /*\n                 * To take a static picture, use the takePicture method.\n                 * You can receive a fileUrl of the static picture in the callback.\n                 */\n                new TakePictureTask(mTakePictureTaskCallback).execute();\n            }\n        }", 
            "title": "3 Open MainActivity"
        }, 
        {
            "location": "/tutorialbutton/#4-map-takepicture-to-middle-side-button", 
            "text": "As a simple test, we will map the middle side or  wifi  button to take a picture. \nIf you forget the constant name, you can use Android Studio code completion to find it.", 
            "title": "4 Map takePicture to Middle Side Button"
        }, 
        {
            "location": "/tutorialbutton/#5-build-install-test", 
            "text": "Follow these steps:   build the apk from inside of Android Studio  install it with adb  reboot camera  put camera into plug-in mode  test it on the camera by pressing the middle button on the side of the camera", 
            "title": "5 Build, install, test"
        }, 
        {
            "location": "/fisheye/", 
            "text": "Dual-Fisheye Still Image\n\n\nBy using plug-in technology, you can improve the user experience for your customers. One example is to\nreduce the time between still image shots. The RICOH THETA S requires approximately 8 seconds between\nshots. The RICOH THETA V reduced this time to 4 seconds. The dual-fisheye plug-in reduces\nthe time between shots to less than a second. \n\n\nThe reduction in time is achieved by delaying the process of converting dual-fisheye images into a single equirectangular image inside the camera.\n\n\nThis is useful for the following applications:\n\n\n\n\nHDR\n\n\nTimelapse\n\n\nHigh volume pictures such as taking 1,000 images at a large construction site\n\n\nFactory or workflow optimization (Taking pictures of an assembly line or other process involving people moving items)\n\n\nComputer graphics 3D model scenes to get lighting information\n\n\n\n\nConcepts Covered\n\n\n\n\nImage stitching control\n\n\nPermission setting to access storage and camera\n\n\nPost-production workflow\n\n\nConversion of dual-fisheye to equirectangular\n\n\n\n\nInstall apk from Source\n\n\nDownload GitHub Repository\n\n\nClone or download the \nGitHub repository for this tutorial\n.\n\n\n\n\nRepository Organization\n\n\n/apk/app-debug.apk - binary to install in the RICOH THETA V\n/tools/stitcher/MiSphereConverter_for_THETAV.apk - mobile stitching application for your Android phone\n/app/src/main/java/com/theta360/pluginapplication/MainActivity.java - main plug-in source code\n\n\n\n\n\nTIP: If you want to use the plug-in first and do not want to download the source, an \nupdated apk was released on August 6, 2018. You can \ndownload the apk\n \nonly. This version is not the same as the apk in the GitHub\nrepository.\n\n\n\n\nOpen Android Project\n\n\nFile -\n Open\n\n\n\n\nBuild apk\n\n\nBuild -\n Build APK(s)\n\n\n\n\n\n\nNOTE: If the build fails, you can continue with the tutorial using the\nbinary apk provided\n\n\n\n\nLocate apk\n\n\n\n\nuse adb to install apk\n\n\nConnect your THETA V to your workstation with a USB cable. \n\n\ncd into the directory that your apk is in.\n\n\nadb install -r app-debug.apk\n\n\n\n\n\nNOTE: If you've previously installed the THETA Plug-in SDK apk, you must\nfirst uninstall the SDK plug-in from the THETA. If adb does not detect your\ncamera, unplug the camera and plug it back in.  If the camera is still not\ndetected, verify that your camera is unlocked. You must join the partner\nprogram to unlock your camera.\n\n\n\n\nuse Vysor to set apk permissions\n\n\nStart Vysor\n\n\n\n\nSelect Apps in Settings\n\n\n\n\nScroll down until you see apps.\n\n\n\n\nSelect \nPlugin Application\n\n\n\n\nIn App Info select Permissions\n\n\n\n\nEnable storage and camera\n\n\n\n\nReboot Camera and Put Into Plug-in Mode\n\n\n\n\nUnplug camera\n\n\nHold power button for 8 seconds\n\n\nTurn camera back on\n\n\nHold mode button for 2 seconds or longer\n\n\nConfirm that that the LED above the shutter button is white\n\n\nWi-Fi LED below shutter will be aqua color and flashing\n\n\n\n\nTaking Pictures\n\n\nThe camera has two modes by default. It can either take a single dual-fisheye image or \ntake three dual-fisheye pictures in rapid succession for bracketing.  You can switch\nbetween single image and bracketing mode by pressing the Wi-Fi button on the side of the camera.\nThis must be a short press of less than 2 seconds.\n\n\nSingle Image\n\n\nIn single image mode. the Wi-Fi LED will be aqua and flashing.\n\n\n\n\n3 Shot Mode\n\n\nPress the Wi-Fi button on the side of the camera to get\nthe camera into 3 shot mode.\n\n\nWARNING: If you press the Wi-Fi button for more than a second, the plug-in may not work properly. Press the Wi-Fi button on the side of the camera firmly and release \nit quickly.\n\n\nIn 3 shot mode, the Wi-Fi LED will be magenta and flashing faster compared\n to when the camera is in still image mode. \n\n\n\n\nThe gif below was contributed by community member @juantonto.\n\n\n\n\nFor 3 shot mode, you need to stabilize the camera for the duration of \nthe three shots. Place the camera on tripod or stand it up on a table.\n\n\nPress the shutter button.\n\n\nRefer to the video above for the expected behavior of the camera,\nincluding LED and audio feedback.\n\n\nConfirm Pictures were Taken\n\n\nConnect camera to your computer with a USB cable.\n\n\nIn a file browser such as File Explorer, click into RICOH THETA V in\nthe same process you use for a normal camera or storage device.\nGo into \nDCIM/100RICOH\n. You will see the dual-fisheye images with\nfilenames that contain a date and time stamp.\n\n\n\n\nStitching Dual-fisheye Images Into Equirectangular\n\n\nFor most applications, you will need to stitch the images in post-production processing\nusing your own stitching library. For this tutorial, we will use a few \ncommercial products to stitch the dual-fisheye image into equirectangular. \nThird-party stitching libraries do not have the lens parameter information\nfrom Ricoh and thus require manual callibration for each camera. Ricoh does\nnot make the lens parameter information available.\n\n\nAndroid Phone Stitching Application\n\n\nIchi Hirota has produced a stitching library and Android mobile phone app that requires a one-time callibration for each camera. A trial version\nof the callibration app is available \nhere\n.  This trial version of the app has a watermark.\n\n\nThe mobile app apk is also available in the GitHub repository you downloaded for this tutorial.\nIt is under the directory \ntools/stitcher\n.\n\n\nYou can commercially license Ichi's stitching library \nand Android application.\nFor more information on licensing Ichi's stitching library and Android application,\nplease contact Jesse Casman at jcasman@oppkey.com.\n\n\nIf you prefer to use a desktop application, you can use PTGui. The guide to use PTGui\nto stitch the image is provided at the end of this article.\n\n\nOriginal Dual-fisheye Image\n\n\n\n\nCallibration Application\n\n\n\n\nDual-fisheye image loaded into callibration app.\n\n\n\n\nThe lens distortion is compensated for\nby selecting points on the edges of the spheres. This is a one time process. \nThe lens distortion information is then stored in the mobile app.\n\n\n\n\n\n\nWhen you select the points of overlap, the callibration app\nwill present a zoom view so that you can precisely select \nthe overlap. In the view below, we're using the tree branch\nas the callibration point.\n\n\n\n\nHDR is handled by the application.\n\n\n\n\nStitching Results\n\n\n\n\nClose-Up on Stitch Line\n\n\nViewed using the Ricoh Desktop Appplication\n\n\n\n\n\n\n\n\nHDR - Blending 3 Shots into Single Image\n\n\nYou can use \nPicturenaut\n from HDR Labs to combine the 3 images into a single image.\n\n\n\n\n\n\nPicturenaut outputs a TIFF file. I converted this to jpeg using another graphics\nprogram called \nGIMP\n. \n\n\n\n\n\n\nI then used PTGui to stitch the dual-fisheye to equirectangular.\n\n\n\n\n\n\nModify Code to Take 7 Images\n\n\nLet's modify the code to take 7 pictures with 7 different \nexposure compensation values:\n\n\n-2.0, -1.3, -0.7, 0.0, 0.7, 1.3, 2.0\n\n\n\n\nBenefits\n\n\nBasic information on High Dynamic Range Imaging (HDRi) is available on \n\nWikipedia\n.\n\n\nThis image shows some of the benefits.\n\n\n\n\nHDRi is also commonly used in the digital graphics industry. The\ngraphic below from the \nUnity HDRI view documentation\n \nwill give you a feel for how HDRI can help with lighting and perspective.\n\n\n\n\nSteps\n\n\n1. Open MainActivity.java\n\n\nUnder \napp/java/com.theta360.pluginapplication\n, locate \nMainActivity\n.\n\n\n\n\n2. Add Variable for NumberOfImages\n\n\nIn \nMainActivity.java\n, add an integer variable called numberOfImages and set the value to 7.\n\n\n\n\n3. Reset Bracket Count\n\n\nAt roughly line 167, reset the variable bcnt to the numberOfImages.\n\n\n\n\n4. Locate nextShutter()\n\n\nAt roughly line 192, identify the section for \nnextShutter()\n\n\n\n\n5. Create if statement for modification\n\n\nWe will use an if statement to isolate your modification and preserve\nthe original 3 image algorithm as a reference.\n\n\nAt roughly line 200, look for the line \nif(bcnt \n 0)\n. Inside that \nstatement create an if statement under the line, \n\n\nparams.set(\"RIC_SHOOTING_MODE\", \"RicStillCaptureStd\");\n\n\n\nBelow this line, add \nif (numberOfImages == 7) {}\n\n\n\n\n6. Review Exposure Compensation API\n\n\nWe will adjust the exposure compensation value for every image\nin our 7 image set. Before modifying the code, let's look at\nthe options the API provides for adjustment.\n\n\nRICOH Camera API for exposure compensation is available at: \n\n\nhttps://api.ricoh/docs/theta-plugin-reference/camera-api/\n\n\n\n\n7. Adjust Exposure Compensation\n\n\nWe will start the exposure compensation value at -6 and adjust it up by \n2 for each image. With 7 images, this value will be changed with these values for\neach image: -6, -4, -2, 0, 2, 4, 6.\n\n\nThe code for setting exposure compensation is shown below.\n\n\nif(bcnt \n 0) {\n    params = mCamera.getParameters();\n    params.set(\"RIC_SHOOTING_MODE\", \"RicStillCaptureStd\");\n    if (numberOfImages == 7) {\n        params.setExposureCompensation(exposureCompensationValue);\n        exposureCompensationValue = exposureCompensationValue + 2;\n    } else {\n        params.setExposureCompensation(3 * ((bcnt - 2)));\n    }\n\n    bcnt = bcnt - 1;\n\n\n\nA complete repository of the modified code is here:\n\n\nhttps://github.com/codetricity/theta-7-image-dual-fisheye\n\n\n8. Build and Install\n\n\nBuild the apk. Before installing the apk, you must manually delete the \nexisting Plugin Application from your camera. \n\n\nFollow this process:\n\n\n\n\nbuild apk in Android Studio\n\n\nuse Vysor or the Ricoh desktop app to uninstall the existing plug-in application\n\n\nuse adb install -r app-debug.apk to install the new apk you just built\n\n\n\n\n9. Create Single HDR Image\n\n\nUse picturenaut to merge the 7 images into a single HDR image.\n\n\n\n\n\n\n10. Stitch Dual-fisheye Image into Equirectangular\n\n\nI used Ichi Hirota's mobile app for the stitching.\n\n\n\n\n\n\nHere's a view of the stitch line on the other side of the picture.\n\n\n\n\nHere's a closeup of the stitch line. It's almost impossible to see it.\n\n\n\n\nCongratulations! You've completed the dual-fisheye tutorial!\n\n\nReferences and Resources\n\n\nTurning off THETA V Stitching\n\n\nStill images can be saved as dual-fisheye by adjusting the stitching parameter.\n\n\nmParameters.set(\"RIC_PROC_STITCHING_TYPE\", \"RicNonStitching\");\n\n\n\nThe size of the dual-fish image is 5792x2896. Use the command below:\n\n\nmParameters.setPictureSize(5792, 2896);\n\n\n\nThe picture below is from Ichi Hirota.\n\n\n\n\n\n\nThis article\n \nprovides more information on a plug-in built by community\ndeveloper Ichi Hirota.\n\n\nHere's example code from Ichi Hirota.\n\n\n\n\nStitching with Post-Shoot Tools\n\n\nInstead of stitching the dual-fisheye image inside of the camera, you will\nneed to use tools on your PC to convert the dual-fisheye image into equirectangular.\n\n\nPTGui\n\n\nCommunity member Svendus has \n\nreported\n success stitching hundreds of spheres on \nPC and Mac using \nPTGui\n 11.2. A free trial version\nis available.\n\n\nThis \nproject file bundle\n has both a preset for THETA images as well as an example image.\n\n\n\n\nOriginal Image\n\n\n\n\nStitched Image\n\n\n\n\nClose-up Image\n\n\nUsing the THETA Desktop Application to view the stitched image.\n\n\n\n\nOther Stitching Solutions\n\n\nCommunity member squizard360 is \nexperimenting\n with Hugin and the \n\ndualfisheye2equirectangular_ffmpeg_remap project\n from \n\nevertvorster\n.", 
            "title": "Tutorial - Dual Fisheye"
        }, 
        {
            "location": "/fisheye/#dual-fisheye-still-image", 
            "text": "By using plug-in technology, you can improve the user experience for your customers. One example is to\nreduce the time between still image shots. The RICOH THETA S requires approximately 8 seconds between\nshots. The RICOH THETA V reduced this time to 4 seconds. The dual-fisheye plug-in reduces\nthe time between shots to less than a second.   The reduction in time is achieved by delaying the process of converting dual-fisheye images into a single equirectangular image inside the camera.  This is useful for the following applications:   HDR  Timelapse  High volume pictures such as taking 1,000 images at a large construction site  Factory or workflow optimization (Taking pictures of an assembly line or other process involving people moving items)  Computer graphics 3D model scenes to get lighting information", 
            "title": "Dual-Fisheye Still Image"
        }, 
        {
            "location": "/fisheye/#concepts-covered", 
            "text": "Image stitching control  Permission setting to access storage and camera  Post-production workflow  Conversion of dual-fisheye to equirectangular", 
            "title": "Concepts Covered"
        }, 
        {
            "location": "/fisheye/#install-apk-from-source", 
            "text": "", 
            "title": "Install apk from Source"
        }, 
        {
            "location": "/fisheye/#download-github-repository", 
            "text": "Clone or download the  GitHub repository for this tutorial .   Repository Organization  /apk/app-debug.apk - binary to install in the RICOH THETA V\n/tools/stitcher/MiSphereConverter_for_THETAV.apk - mobile stitching application for your Android phone\n/app/src/main/java/com/theta360/pluginapplication/MainActivity.java - main plug-in source code   TIP: If you want to use the plug-in first and do not want to download the source, an \nupdated apk was released on August 6, 2018. You can  download the apk  \nonly. This version is not the same as the apk in the GitHub\nrepository.", 
            "title": "Download GitHub Repository"
        }, 
        {
            "location": "/fisheye/#open-android-project", 
            "text": "File -  Open", 
            "title": "Open Android Project"
        }, 
        {
            "location": "/fisheye/#build-apk", 
            "text": "Build -  Build APK(s)    NOTE: If the build fails, you can continue with the tutorial using the\nbinary apk provided", 
            "title": "Build apk"
        }, 
        {
            "location": "/fisheye/#locate-apk", 
            "text": "", 
            "title": "Locate apk"
        }, 
        {
            "location": "/fisheye/#use-adb-to-install-apk", 
            "text": "Connect your THETA V to your workstation with a USB cable.   cd into the directory that your apk is in.  adb install -r app-debug.apk   NOTE: If you've previously installed the THETA Plug-in SDK apk, you must\nfirst uninstall the SDK plug-in from the THETA. If adb does not detect your\ncamera, unplug the camera and plug it back in.  If the camera is still not\ndetected, verify that your camera is unlocked. You must join the partner\nprogram to unlock your camera.", 
            "title": "use adb to install apk"
        }, 
        {
            "location": "/fisheye/#use-vysor-to-set-apk-permissions", 
            "text": "", 
            "title": "use Vysor to set apk permissions"
        }, 
        {
            "location": "/fisheye/#start-vysor", 
            "text": "", 
            "title": "Start Vysor"
        }, 
        {
            "location": "/fisheye/#select-apps-in-settings", 
            "text": "Scroll down until you see apps.", 
            "title": "Select Apps in Settings"
        }, 
        {
            "location": "/fisheye/#select-plugin-application", 
            "text": "", 
            "title": "Select Plugin Application"
        }, 
        {
            "location": "/fisheye/#in-app-info-select-permissions", 
            "text": "", 
            "title": "In App Info select Permissions"
        }, 
        {
            "location": "/fisheye/#enable-storage-and-camera", 
            "text": "", 
            "title": "Enable storage and camera"
        }, 
        {
            "location": "/fisheye/#reboot-camera-and-put-into-plug-in-mode", 
            "text": "Unplug camera  Hold power button for 8 seconds  Turn camera back on  Hold mode button for 2 seconds or longer  Confirm that that the LED above the shutter button is white  Wi-Fi LED below shutter will be aqua color and flashing", 
            "title": "Reboot Camera and Put Into Plug-in Mode"
        }, 
        {
            "location": "/fisheye/#taking-pictures", 
            "text": "The camera has two modes by default. It can either take a single dual-fisheye image or \ntake three dual-fisheye pictures in rapid succession for bracketing.  You can switch\nbetween single image and bracketing mode by pressing the Wi-Fi button on the side of the camera.\nThis must be a short press of less than 2 seconds.", 
            "title": "Taking Pictures"
        }, 
        {
            "location": "/fisheye/#single-image", 
            "text": "In single image mode. the Wi-Fi LED will be aqua and flashing.", 
            "title": "Single Image"
        }, 
        {
            "location": "/fisheye/#3-shot-mode", 
            "text": "Press the Wi-Fi button on the side of the camera to get\nthe camera into 3 shot mode.  WARNING: If you press the Wi-Fi button for more than a second, the plug-in may not work properly. Press the Wi-Fi button on the side of the camera firmly and release \nit quickly.  In 3 shot mode, the Wi-Fi LED will be magenta and flashing faster compared\n to when the camera is in still image mode.    The gif below was contributed by community member @juantonto.   For 3 shot mode, you need to stabilize the camera for the duration of \nthe three shots. Place the camera on tripod or stand it up on a table.  Press the shutter button.  Refer to the video above for the expected behavior of the camera,\nincluding LED and audio feedback.", 
            "title": "3 Shot Mode"
        }, 
        {
            "location": "/fisheye/#confirm-pictures-were-taken", 
            "text": "Connect camera to your computer with a USB cable.  In a file browser such as File Explorer, click into RICOH THETA V in\nthe same process you use for a normal camera or storage device.\nGo into  DCIM/100RICOH . You will see the dual-fisheye images with\nfilenames that contain a date and time stamp.", 
            "title": "Confirm Pictures were Taken"
        }, 
        {
            "location": "/fisheye/#stitching-dual-fisheye-images-into-equirectangular", 
            "text": "For most applications, you will need to stitch the images in post-production processing\nusing your own stitching library. For this tutorial, we will use a few \ncommercial products to stitch the dual-fisheye image into equirectangular. \nThird-party stitching libraries do not have the lens parameter information\nfrom Ricoh and thus require manual callibration for each camera. Ricoh does\nnot make the lens parameter information available.", 
            "title": "Stitching Dual-fisheye Images Into Equirectangular"
        }, 
        {
            "location": "/fisheye/#android-phone-stitching-application", 
            "text": "Ichi Hirota has produced a stitching library and Android mobile phone app that requires a one-time callibration for each camera. A trial version\nof the callibration app is available  here .  This trial version of the app has a watermark.  The mobile app apk is also available in the GitHub repository you downloaded for this tutorial.\nIt is under the directory  tools/stitcher .  You can commercially license Ichi's stitching library \nand Android application.\nFor more information on licensing Ichi's stitching library and Android application,\nplease contact Jesse Casman at jcasman@oppkey.com.  If you prefer to use a desktop application, you can use PTGui. The guide to use PTGui\nto stitch the image is provided at the end of this article.", 
            "title": "Android Phone Stitching Application"
        }, 
        {
            "location": "/fisheye/#original-dual-fisheye-image", 
            "text": "", 
            "title": "Original Dual-fisheye Image"
        }, 
        {
            "location": "/fisheye/#callibration-application", 
            "text": "Dual-fisheye image loaded into callibration app.   The lens distortion is compensated for\nby selecting points on the edges of the spheres. This is a one time process. \nThe lens distortion information is then stored in the mobile app.    When you select the points of overlap, the callibration app\nwill present a zoom view so that you can precisely select \nthe overlap. In the view below, we're using the tree branch\nas the callibration point.   HDR is handled by the application.", 
            "title": "Callibration Application"
        }, 
        {
            "location": "/fisheye/#stitching-results", 
            "text": "", 
            "title": "Stitching Results"
        }, 
        {
            "location": "/fisheye/#close-up-on-stitch-line", 
            "text": "Viewed using the Ricoh Desktop Appplication", 
            "title": "Close-Up on Stitch Line"
        }, 
        {
            "location": "/fisheye/#hdr-blending-3-shots-into-single-image", 
            "text": "You can use  Picturenaut  from HDR Labs to combine the 3 images into a single image.    Picturenaut outputs a TIFF file. I converted this to jpeg using another graphics\nprogram called  GIMP .     I then used PTGui to stitch the dual-fisheye to equirectangular.", 
            "title": "HDR - Blending 3 Shots into Single Image"
        }, 
        {
            "location": "/fisheye/#modify-code-to-take-7-images", 
            "text": "Let's modify the code to take 7 pictures with 7 different \nexposure compensation values:  -2.0, -1.3, -0.7, 0.0, 0.7, 1.3, 2.0", 
            "title": "Modify Code to Take 7 Images"
        }, 
        {
            "location": "/fisheye/#benefits", 
            "text": "Basic information on High Dynamic Range Imaging (HDRi) is available on  Wikipedia .  This image shows some of the benefits.   HDRi is also commonly used in the digital graphics industry. The\ngraphic below from the  Unity HDRI view documentation  \nwill give you a feel for how HDRI can help with lighting and perspective.", 
            "title": "Benefits"
        }, 
        {
            "location": "/fisheye/#steps", 
            "text": "", 
            "title": "Steps"
        }, 
        {
            "location": "/fisheye/#1-open-mainactivityjava", 
            "text": "Under  app/java/com.theta360.pluginapplication , locate  MainActivity .", 
            "title": "1. Open MainActivity.java"
        }, 
        {
            "location": "/fisheye/#2-add-variable-for-numberofimages", 
            "text": "In  MainActivity.java , add an integer variable called numberOfImages and set the value to 7.", 
            "title": "2. Add Variable for NumberOfImages"
        }, 
        {
            "location": "/fisheye/#3-reset-bracket-count", 
            "text": "At roughly line 167, reset the variable bcnt to the numberOfImages.", 
            "title": "3. Reset Bracket Count"
        }, 
        {
            "location": "/fisheye/#4-locate-nextshutter", 
            "text": "At roughly line 192, identify the section for  nextShutter()", 
            "title": "4. Locate nextShutter()"
        }, 
        {
            "location": "/fisheye/#5-create-if-statement-for-modification", 
            "text": "We will use an if statement to isolate your modification and preserve\nthe original 3 image algorithm as a reference.  At roughly line 200, look for the line  if(bcnt   0) . Inside that \nstatement create an if statement under the line,   params.set(\"RIC_SHOOTING_MODE\", \"RicStillCaptureStd\");  Below this line, add  if (numberOfImages == 7) {}", 
            "title": "5. Create if statement for modification"
        }, 
        {
            "location": "/fisheye/#6-review-exposure-compensation-api", 
            "text": "We will adjust the exposure compensation value for every image\nin our 7 image set. Before modifying the code, let's look at\nthe options the API provides for adjustment.  RICOH Camera API for exposure compensation is available at:   https://api.ricoh/docs/theta-plugin-reference/camera-api/", 
            "title": "6. Review Exposure Compensation API"
        }, 
        {
            "location": "/fisheye/#7-adjust-exposure-compensation", 
            "text": "We will start the exposure compensation value at -6 and adjust it up by \n2 for each image. With 7 images, this value will be changed with these values for\neach image: -6, -4, -2, 0, 2, 4, 6.  The code for setting exposure compensation is shown below.  if(bcnt   0) {\n    params = mCamera.getParameters();\n    params.set(\"RIC_SHOOTING_MODE\", \"RicStillCaptureStd\");\n    if (numberOfImages == 7) {\n        params.setExposureCompensation(exposureCompensationValue);\n        exposureCompensationValue = exposureCompensationValue + 2;\n    } else {\n        params.setExposureCompensation(3 * ((bcnt - 2)));\n    }\n\n    bcnt = bcnt - 1;  A complete repository of the modified code is here:  https://github.com/codetricity/theta-7-image-dual-fisheye", 
            "title": "7. Adjust Exposure Compensation"
        }, 
        {
            "location": "/fisheye/#8-build-and-install", 
            "text": "Build the apk. Before installing the apk, you must manually delete the \nexisting Plugin Application from your camera.   Follow this process:   build apk in Android Studio  use Vysor or the Ricoh desktop app to uninstall the existing plug-in application  use adb install -r app-debug.apk to install the new apk you just built", 
            "title": "8. Build and Install"
        }, 
        {
            "location": "/fisheye/#9-create-single-hdr-image", 
            "text": "Use picturenaut to merge the 7 images into a single HDR image.", 
            "title": "9. Create Single HDR Image"
        }, 
        {
            "location": "/fisheye/#10-stitch-dual-fisheye-image-into-equirectangular", 
            "text": "I used Ichi Hirota's mobile app for the stitching.    Here's a view of the stitch line on the other side of the picture.   Here's a closeup of the stitch line. It's almost impossible to see it.   Congratulations! You've completed the dual-fisheye tutorial!", 
            "title": "10. Stitch Dual-fisheye Image into Equirectangular"
        }, 
        {
            "location": "/fisheye/#references-and-resources", 
            "text": "", 
            "title": "References and Resources"
        }, 
        {
            "location": "/fisheye/#turning-off-theta-v-stitching", 
            "text": "Still images can be saved as dual-fisheye by adjusting the stitching parameter.  mParameters.set(\"RIC_PROC_STITCHING_TYPE\", \"RicNonStitching\");  The size of the dual-fish image is 5792x2896. Use the command below:  mParameters.setPictureSize(5792, 2896);  The picture below is from Ichi Hirota.    This article  \nprovides more information on a plug-in built by community\ndeveloper Ichi Hirota.  Here's example code from Ichi Hirota.", 
            "title": "Turning off THETA V Stitching"
        }, 
        {
            "location": "/fisheye/#stitching-with-post-shoot-tools", 
            "text": "Instead of stitching the dual-fisheye image inside of the camera, you will\nneed to use tools on your PC to convert the dual-fisheye image into equirectangular.", 
            "title": "Stitching with Post-Shoot Tools"
        }, 
        {
            "location": "/fisheye/#ptgui", 
            "text": "Community member Svendus has  reported  success stitching hundreds of spheres on \nPC and Mac using  PTGui  11.2. A free trial version\nis available.  This  project file bundle  has both a preset for THETA images as well as an example image.", 
            "title": "PTGui"
        }, 
        {
            "location": "/fisheye/#original-image", 
            "text": "", 
            "title": "Original Image"
        }, 
        {
            "location": "/fisheye/#stitched-image", 
            "text": "", 
            "title": "Stitched Image"
        }, 
        {
            "location": "/fisheye/#close-up-image", 
            "text": "Using the THETA Desktop Application to view the stitched image.", 
            "title": "Close-up Image"
        }, 
        {
            "location": "/fisheye/#other-stitching-solutions", 
            "text": "Community member squizard360 is  experimenting  with Hugin and the  dualfisheye2equirectangular_ffmpeg_remap project  from  evertvorster .", 
            "title": "Other Stitching Solutions"
        }, 
        {
            "location": "/example/wireless/", 
            "text": "Wireless Live Streaming Example\n\n\nThe source code is available on GitHub. \n\n\nhttps://github.com/ricohapi/theta-wireless-live-streaming-plugin\n\n\nYou may need\nto clone the repo with \nGit Large File Storage\n \nif you want to download the pre-compiled apk with the repo. This guide\ncovers working with the source code and compiling it within Android Studio.\n\n\nUsage of the Wireless Live Streaming plug-in is covered extensively in the \n\nPlug-in User Guide\n \n(free registration to community required).\n\n\nImport Project\n\n\nYou do not need to build from source if you want to test the plug-in functionality.\nYou can go to the THETA Store and download the plug-in for free.\n\n\nAfter extracting the files, you will see a standard project structure. If you extracted\nfrom a zipped file, the pre-compiled apk will not work. You must build from source.\n\n\n\n\nIn Android Studio, go to \nFile -\n New -\n Import Project...\n.\n\n\n\n\nSelect the wireless-live-streaming project. I needed to change\nthe name of the project to a shorter project name.\n\n\n\n\nAfter importing into Android Studio, you will see your project files.\n\n\n\n\nBrowse Files\n\n\nLook into the web server and rtmp libraries that the plug-in\nis using.\n\n\nNanoHTTPD for web server configuration\n\n\nOne of the more interesting files is the AndroidWebServer that is used for the configuration\nof the plug-in through a web browser.\n\n\n\n\nThe import statement shows the use of the \nNanoHTTPD package\n \nthat is available on GitHub.\n\n\n\n\n\n\nBy using this technique, you can build a browser-based tool that allows\nyour users to connect to the camera with a mobile phone or desktop computer.\nSee the plug-in user guide for more information on this technique.\n\n\n\n\nrtmp libraries\n\n\n\n\n\n\nrtmp-rtsp-stream-client-java\n by pedroSG94\n\n\nSimpleRtmp\n by faucamp\n\n\n\n\nAfter looking at the file structure, build the package.\n\n\nBuild\n\n\n\n\nIgnore the warning about deprecated API.\n\n\n\n\nFocus on the happier \nAPK(s) generated successfully\n message.\n\n\n\n\nInstall\n\n\nUse adb to install the apk.  The command is \nadb install app-debug.apk\n. \nYou can specify by full path of the file on the cmd prompt by dragging the\nfile from File Explorer onto the Command Prompt.\n\n\n\n\nLook for the \nSuccess\n status message.\n\n\n\n\nPermissions\n\n\nI suggest you use Vysor to check the permissions of the plug-in.\n\n\nGo to settings.\n\n\n\n\nGo to Apps. Select \nWireless Live Streaming\n.\n\n\n\n\nSelect \nPermissions\n.\n\n\n\n\nSet \nCamera\n and \nMicrophone\n permissions.\n\n\n\n\nNote that audio streaming is single channel.", 
            "title": "Example - Wireless Live Streaming"
        }, 
        {
            "location": "/example/wireless/#wireless-live-streaming-example", 
            "text": "The source code is available on GitHub.   https://github.com/ricohapi/theta-wireless-live-streaming-plugin  You may need\nto clone the repo with  Git Large File Storage  \nif you want to download the pre-compiled apk with the repo. This guide\ncovers working with the source code and compiling it within Android Studio.  Usage of the Wireless Live Streaming plug-in is covered extensively in the  Plug-in User Guide  \n(free registration to community required).", 
            "title": "Wireless Live Streaming Example"
        }, 
        {
            "location": "/example/wireless/#import-project", 
            "text": "You do not need to build from source if you want to test the plug-in functionality.\nYou can go to the THETA Store and download the plug-in for free.  After extracting the files, you will see a standard project structure. If you extracted\nfrom a zipped file, the pre-compiled apk will not work. You must build from source.   In Android Studio, go to  File -  New -  Import Project... .   Select the wireless-live-streaming project. I needed to change\nthe name of the project to a shorter project name.   After importing into Android Studio, you will see your project files.", 
            "title": "Import Project"
        }, 
        {
            "location": "/example/wireless/#browse-files", 
            "text": "Look into the web server and rtmp libraries that the plug-in\nis using.", 
            "title": "Browse Files"
        }, 
        {
            "location": "/example/wireless/#nanohttpd-for-web-server-configuration", 
            "text": "One of the more interesting files is the AndroidWebServer that is used for the configuration\nof the plug-in through a web browser.   The import statement shows the use of the  NanoHTTPD package  \nthat is available on GitHub.    By using this technique, you can build a browser-based tool that allows\nyour users to connect to the camera with a mobile phone or desktop computer.\nSee the plug-in user guide for more information on this technique.", 
            "title": "NanoHTTPD for web server configuration"
        }, 
        {
            "location": "/example/wireless/#rtmp-libraries", 
            "text": "rtmp-rtsp-stream-client-java  by pedroSG94  SimpleRtmp  by faucamp   After looking at the file structure, build the package.", 
            "title": "rtmp libraries"
        }, 
        {
            "location": "/example/wireless/#build", 
            "text": "Ignore the warning about deprecated API.   Focus on the happier  APK(s) generated successfully  message.", 
            "title": "Build"
        }, 
        {
            "location": "/example/wireless/#install", 
            "text": "Use adb to install the apk.  The command is  adb install app-debug.apk . \nYou can specify by full path of the file on the cmd prompt by dragging the\nfile from File Explorer onto the Command Prompt.   Look for the  Success  status message.", 
            "title": "Install"
        }, 
        {
            "location": "/example/wireless/#permissions", 
            "text": "I suggest you use Vysor to check the permissions of the plug-in.  Go to settings.   Go to Apps. Select  Wireless Live Streaming .   Select  Permissions .   Set  Camera  and  Microphone  permissions.   Note that audio streaming is single channel.", 
            "title": "Permissions"
        }, 
        {
            "location": "/example/cloudupload/", 
            "text": "File Cloud Upload Example\n\n\nThe source code is available on GitHub. \n\n\nhttps://github.com/ricohapi/theta-cloud-upload-plugin\n.\n\n\nYou may need\nto clone the repo with \nGit Large File Storage\n\nif you want to download the pre-compiled apk with the repo. This guide\ncovers working with the source code and compiling it within Android Studio.\n\n\nUsage of the File Cloud Upload plug-in is covered extensively in the \n\nPlug-in User Guide\n \n(free registration to community required).\n\n\nPrerequisites\n\n\n\n\nunderstanding of how to import projects into Android Studio. \nIf you need a refresher, see the example for the Wireless Live \nStreaming Plug-in\n\n\nexperience with THETA plug-in. More information is available\nin the Plug-in User Guide\n\n\nability to connect your THETA to the Internet in client mode. See\nthe Plug-in User Guide for more information\n\n\nTHETA must be in developer mode\n\n\n\n\nTest Environment\n\n\n\n\nTHETA THETA V firmware 2.31.1\n\n\nAndroid Studio 3.1.3\n\n\nWindows 10 64 bit\n\n\nFile Cloud Upload Plug-in ver.1.0.9 (2018/07/23)\n\n\n\n\nImport Project\n\n\nFile -\n Import Project\n\n\n\n\nBrowse Code\n\n\napp -\n java -\n com.theta360.cloudupload.net\n\n\n\n\nSecret Key\n\n\nScroll down to the section on SecretKey. You will need to insert your own \nSecretKey.\n\n\nBuild Project\n\n\n\n\nInstall\n\n\nadb install PATH\\app-debug.apk\n\n\n\n\nCheck App Permissions\n\n\nThe File Cloud Upload plug-in must have permission to use\nstorage.\n\n\nIn Vysor, go to \nSettings -\n Apps\n.\n\n\n\n\n\n\nTest Usage\n\n\nPlease see the Plug-in User Guide for usage information.", 
            "title": "Example - File Cloud Upload"
        }, 
        {
            "location": "/example/cloudupload/#file-cloud-upload-example", 
            "text": "The source code is available on GitHub.   https://github.com/ricohapi/theta-cloud-upload-plugin .  You may need\nto clone the repo with  Git Large File Storage \nif you want to download the pre-compiled apk with the repo. This guide\ncovers working with the source code and compiling it within Android Studio.  Usage of the File Cloud Upload plug-in is covered extensively in the  Plug-in User Guide  \n(free registration to community required).", 
            "title": "File Cloud Upload Example"
        }, 
        {
            "location": "/example/cloudupload/#prerequisites", 
            "text": "understanding of how to import projects into Android Studio. \nIf you need a refresher, see the example for the Wireless Live \nStreaming Plug-in  experience with THETA plug-in. More information is available\nin the Plug-in User Guide  ability to connect your THETA to the Internet in client mode. See\nthe Plug-in User Guide for more information  THETA must be in developer mode", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/example/cloudupload/#test-environment", 
            "text": "THETA THETA V firmware 2.31.1  Android Studio 3.1.3  Windows 10 64 bit  File Cloud Upload Plug-in ver.1.0.9 (2018/07/23)", 
            "title": "Test Environment"
        }, 
        {
            "location": "/example/cloudupload/#import-project", 
            "text": "File -  Import Project", 
            "title": "Import Project"
        }, 
        {
            "location": "/example/cloudupload/#browse-code", 
            "text": "app -  java -  com.theta360.cloudupload.net", 
            "title": "Browse Code"
        }, 
        {
            "location": "/example/cloudupload/#secret-key", 
            "text": "Scroll down to the section on SecretKey. You will need to insert your own \nSecretKey.", 
            "title": "Secret Key"
        }, 
        {
            "location": "/example/cloudupload/#build-project", 
            "text": "", 
            "title": "Build Project"
        }, 
        {
            "location": "/example/cloudupload/#install", 
            "text": "adb install PATH\\app-debug.apk", 
            "title": "Install"
        }, 
        {
            "location": "/example/cloudupload/#check-app-permissions", 
            "text": "The File Cloud Upload plug-in must have permission to use\nstorage.  In Vysor, go to  Settings -  Apps .", 
            "title": "Check App Permissions"
        }, 
        {
            "location": "/example/cloudupload/#test-usage", 
            "text": "Please see the Plug-in User Guide for usage information.", 
            "title": "Test Usage"
        }, 
        {
            "location": "/example/faceblur/", 
            "text": "Automatic Face Blur Example\n\n\nThe source code is available on GitHub.  \n\n\nhttps://github.com/ricohapi/theta-automatic-face-blur-plugin\n\n\nBuild Project\n\n\nImport\n\n\n\n\nVerify that you imported the correct project.  :-)\n\n\n\n\nBuild\n\n\nBuild -\n Build APK(s)\n\n\n\n\nYou should see a successful build.\n\n\n\n\nMy APK is 1,891 KB.\n\n\nInstall\n\n\nadb install -r PATH/app-debug.apk\n\n\n\n\n\nEnable\n\n\nIn the Ricoh desktop application, go to \nFile -\n Plug-in management...\n.\n\n\n\n\nSelect Automatic Face Blur.\n\n\n\n\nSet Plug-in Permissions\n\n\nIn Vysor, go to app settings.\n\n\n\n\nEnable storage permission.\n\n\n\n\nConfigure\n\n\nGet IP address. In the example below, I'm using Vysor.\n\n\n\n\nGo to your IP address at port 8888.\n\n\nhttp://192.168.2.100:8888/\n\n\n\n\n\nTest\n\n\nPut camera in plug-in mode. \n\n\nTake picture.\n\n\nThe camera will save two pictures. The original file starts with R. The \nblurred file starts with B.\n\n\n\n\nThe original image is shown below.\n\n\n\n\nInspect Code\n\n\nFace Detection\n\n\nUnder \n/task/\n \n\nImageProcessorTask.java\n has the code to detect a human face.\n\n\nIt uses \nandroid.media.FaceDetector\n.\n\n\nAt the top of the code, there are constants that define the max number of faces, and the edges\nof the equirectangular image. The image is divided into four quandrants.\n\n\n//Divide the equirectangular image into similar four parts, the rightmost x coordinate of the leftmost part.\nprivate static final int RIGHTMOST_OF_LEFT_IMAGE = 1344;\n//Divide the equirectangular image into similar four, the leftmost x coordinate of the rightmost part.\nprivate static final int LEFTMOST_OF_RIGHT_IMAGE = 4032;\n//Maximum of faces can be detected.\nprivate static final int MAX_FACE = 256;\npublic static final String BLURRED_FILE_KEY = \"blurred_file_url\";\npublic static final String ORIGINAL_FILE_KEY = \"original_file_url\";\n\n\n\nThere are numerous examples of FaceDection for Android online.\n\n\nBlurring is accomplished with \nFaceDetector.Face\n. Inspect the code\nto see the example.\n\n\nLivePreview\n\n\nStreaming to the web browser is handled with \ncamera.getLivePreview\n,\nwhich is the THETA API 2.1, the API based on OSC. We sometimes refer to this API as the Wi-Fi API.\n\n\nIn the file \nShowLiveViewTask.java\n, you can see the code.\n\n\npublishProgress(\"start Live view\");\nHttpConnector camera = new HttpConnector();\nInputStream is = camera.getLivePreview();\nmjis = new MJpegInputStream(is);\n\n\n\nYou can see that the output of \ngetLivePreview\n is a MotionJPEG stream, not H.264.\nUsing \ngetLivePreview\n with the THETA V will result in a maximum\nresolution of 1920x960 using MotionJPEG, not the 3840x1920 for\nLive Streaming. As shown with the Wireless Live Streaming plug-in,\nWi-Fi streaming at 4K is smooth from the camera directly.\n\n\nIt's important to note that this method does not use the \nRicMoviePreview3840\n or similar value for \nRIC_SHOOTING_MODE\n that is explained in the \n\nTHETA Plug-in API\n.\n\n\nThe LivePreview method shown above uses the THETA API 2.1 for simplicity and ease of implementation. It does\nnot use the THETA Plug-in API.", 
            "title": "Example - Automatic Face Blue"
        }, 
        {
            "location": "/example/faceblur/#automatic-face-blur-example", 
            "text": "The source code is available on GitHub.    https://github.com/ricohapi/theta-automatic-face-blur-plugin", 
            "title": "Automatic Face Blur Example"
        }, 
        {
            "location": "/example/faceblur/#build-project", 
            "text": "", 
            "title": "Build Project"
        }, 
        {
            "location": "/example/faceblur/#import", 
            "text": "Verify that you imported the correct project.  :-)", 
            "title": "Import"
        }, 
        {
            "location": "/example/faceblur/#build", 
            "text": "Build -  Build APK(s)   You should see a successful build.   My APK is 1,891 KB.", 
            "title": "Build"
        }, 
        {
            "location": "/example/faceblur/#install", 
            "text": "adb install -r PATH/app-debug.apk", 
            "title": "Install"
        }, 
        {
            "location": "/example/faceblur/#enable", 
            "text": "In the Ricoh desktop application, go to  File -  Plug-in management... .   Select Automatic Face Blur.", 
            "title": "Enable"
        }, 
        {
            "location": "/example/faceblur/#set-plug-in-permissions", 
            "text": "In Vysor, go to app settings.   Enable storage permission.", 
            "title": "Set Plug-in Permissions"
        }, 
        {
            "location": "/example/faceblur/#configure", 
            "text": "Get IP address. In the example below, I'm using Vysor.   Go to your IP address at port 8888.  http://192.168.2.100:8888/", 
            "title": "Configure"
        }, 
        {
            "location": "/example/faceblur/#test", 
            "text": "Put camera in plug-in mode.   Take picture.  The camera will save two pictures. The original file starts with R. The \nblurred file starts with B.   The original image is shown below.", 
            "title": "Test"
        }, 
        {
            "location": "/example/faceblur/#inspect-code", 
            "text": "", 
            "title": "Inspect Code"
        }, 
        {
            "location": "/example/faceblur/#face-detection", 
            "text": "Under  /task/   ImageProcessorTask.java  has the code to detect a human face.  It uses  android.media.FaceDetector .  At the top of the code, there are constants that define the max number of faces, and the edges\nof the equirectangular image. The image is divided into four quandrants.  //Divide the equirectangular image into similar four parts, the rightmost x coordinate of the leftmost part.\nprivate static final int RIGHTMOST_OF_LEFT_IMAGE = 1344;\n//Divide the equirectangular image into similar four, the leftmost x coordinate of the rightmost part.\nprivate static final int LEFTMOST_OF_RIGHT_IMAGE = 4032;\n//Maximum of faces can be detected.\nprivate static final int MAX_FACE = 256;\npublic static final String BLURRED_FILE_KEY = \"blurred_file_url\";\npublic static final String ORIGINAL_FILE_KEY = \"original_file_url\";  There are numerous examples of FaceDection for Android online.  Blurring is accomplished with  FaceDetector.Face . Inspect the code\nto see the example.", 
            "title": "Face Detection"
        }, 
        {
            "location": "/example/faceblur/#livepreview", 
            "text": "Streaming to the web browser is handled with  camera.getLivePreview ,\nwhich is the THETA API 2.1, the API based on OSC. We sometimes refer to this API as the Wi-Fi API.  In the file  ShowLiveViewTask.java , you can see the code.  publishProgress(\"start Live view\");\nHttpConnector camera = new HttpConnector();\nInputStream is = camera.getLivePreview();\nmjis = new MJpegInputStream(is);  You can see that the output of  getLivePreview  is a MotionJPEG stream, not H.264.\nUsing  getLivePreview  with the THETA V will result in a maximum\nresolution of 1920x960 using MotionJPEG, not the 3840x1920 for\nLive Streaming. As shown with the Wireless Live Streaming plug-in,\nWi-Fi streaming at 4K is smooth from the camera directly.  It's important to note that this method does not use the  RicMoviePreview3840  or similar value for  RIC_SHOOTING_MODE  that is explained in the  THETA Plug-in API .  The LivePreview method shown above uses the THETA API 2.1 for simplicity and ease of implementation. It does\nnot use the THETA Plug-in API.", 
            "title": "LivePreview"
        }, 
        {
            "location": "/fun/", 
            "text": "Fun Tests To Explore THETA V Capability\n\n\nThis section is intended to show off some functionality and tests that are a \"good start\" but maybe need more effort. It's constantly a work in progress. But hopefully it helps point you in the right direction or give you some interesting starting points to do more. \n\n\nApps\n\n\nSince you've got a full Android OS funning inside the camera, there are quite a bit of apps and utilities that are already available. This is a real strength of the camera. This video shows some GREAT tips and tricks for setting up different Android apps running inside of the THETA V in plug-in mode. In includes details on setting up Developer Mode, turning off the camera services, using Vysor and using a virtual keyboard to connect to wifi, and tons more. \n\n\n\n\nHere's a simple test after installed Facebook Messenger in a THETA V. We used Facebook Messenger to receive video and audio streams from the Internet. The video also shows the  THETA V playing music and audio from internal plug-ins.\n\n\n\n\nSound\n\n\nThe THETA has all the functionality of a normal Android system. This includes using its speakers and mics (4 total) to interact with users. It's clear that the THETA V plug-in technology can be used to provide audio prompts to users, including human voice feedback. \"Hey, THETA, take a picture now,\" for example.\n\n\nHere's a short, cool test using the internal speaker to play human speech. The audio file is single channel, 22050Hz 32-bit.", 
            "title": "Fun Tests"
        }, 
        {
            "location": "/fun/#fun-tests-to-explore-theta-v-capability", 
            "text": "This section is intended to show off some functionality and tests that are a \"good start\" but maybe need more effort. It's constantly a work in progress. But hopefully it helps point you in the right direction or give you some interesting starting points to do more.", 
            "title": "Fun Tests To Explore THETA V Capability"
        }, 
        {
            "location": "/fun/#apps", 
            "text": "Since you've got a full Android OS funning inside the camera, there are quite a bit of apps and utilities that are already available. This is a real strength of the camera. This video shows some GREAT tips and tricks for setting up different Android apps running inside of the THETA V in plug-in mode. In includes details on setting up Developer Mode, turning off the camera services, using Vysor and using a virtual keyboard to connect to wifi, and tons more.    Here's a simple test after installed Facebook Messenger in a THETA V. We used Facebook Messenger to receive video and audio streams from the Internet. The video also shows the  THETA V playing music and audio from internal plug-ins.", 
            "title": "Apps"
        }, 
        {
            "location": "/fun/#sound", 
            "text": "The THETA has all the functionality of a normal Android system. This includes using its speakers and mics (4 total) to interact with users. It's clear that the THETA V plug-in technology can be used to provide audio prompts to users, including human voice feedback. \"Hey, THETA, take a picture now,\" for example.  Here's a short, cool test using the internal speaker to play human speech. The audio file is single channel, 22050Hz 32-bit.", 
            "title": "Sound"
        }, 
        {
            "location": "/concept/", 
            "text": "Plugin Concepts from the Community\n\n\nWe are constantly working with community members to support \"ideation,\" scoping out possible plug-ins and helping define concepts. Dealing with feature requests and turning those into workable code is a process. Brainstorming, coming up with concepts, sharing them, stress-testing them, and doing this within in the community can move a concept to real code and a finish, sellable product more quickly.\n\n\nHands-Off Action Time-Lapse Concept\n\n\nThanks to \nDaniel Towersey\n from the theta360.guide community for this concept for a \"Hands-Off Action Time-Lapse\" plug-in for the THETA V to be using in paragliding. \n\n\n\n\nDescription of Requirements from Daniel:\n\n\n\n\n\n\nWe use GoPro for standard photo and video included in our package, and sell 360\u00ba photos as an optional photo package.\nI used an LG 360 cam with I st with the app for interval shooting with the app before take off, and then just needed to press the camera button in flight (on a monopod).\nI changed my LG for the Theta V due to 4k video and much superior seaming of the images, but unfortunately found out that for interval shooting I need to press the button on the app, not the camera, with is a pain\u2026 other pilots use the wired ca-3 remote shutter with is also clumsy\u2026\nCan\u2019t get my head around the fact that the Theta doesn\u2019t have a wireless remote shutter, and the camera button will only take still images even though it is set for interval shooting through the control app\u2026\n\n\n\n\n\n\nAnd there are users waiting to get their hands on an app like this:\n\n\n\n\n\n\nHere at our paragliding site alone there must be about 30 to 50 Theta users awaiting such an update, or even better, a wireless remote shutter to substitute the ca-3 cable remote\u2026\n\n\n\n\n\n\n\n\nTo build this plug-in, here's a possible Project Requirements\n\n\n\n\nPlug-in inside of camera handles timelapse\n\n\nShutter button starts/stops timelapse\n\n\nWhite LED above shutter button indicates that it is in plug-in mode\n\n\nMagenta WiFi LED below shutter button flashing indicates that timelapse is activated\n\n\nRate of flashing provides a clue as to current setting\n\n\nButton side button (mode) cycles through pre-set settings\n\n\nCompanion mobile app is used to configure timelapse settings and store them into camera\n\n\n\n\nSome more thoughts from Craig (\n@codetricity\n) about \npossible alternatives to this project using hardware to trigger the timelapse with WiFi or Bluetooth are \nhere\n. \nRight now, it looks like the best way to approach the project with with software only and avoid the need to\nmanufacture or buy a wireless remote. Scroll up to get the full original discussion.\n\n\nThink you could build this? :-)\n\n\nExample Construction Concept\n\n\nI created a new plugin called \nConstructionPlugin\n to\nreduce the time taken to take hundreds of images at construction sites.\n\n\nThe idea is to use a separate application to create a route of rooms.\nThe plugin then saves unique files names for each room.\n\n\n\n\nAs a first step, the plugin saves the construction images\nwith a file name prefaced by \nconstruction\n.\n\n\n\n\nI then created a directory called \nConstruction\n to store\nall my construction pictures for business \nseparately from the normal camera pictures stored in \n100RICOH\n.\nI am using a more scalable naming convention of the form\n \nroom01sect01.jpg\n.\n\n\nIn \nMainFragment.java\n, I changed the file save location.\n\n\nprivate Camera.PictureCallback mJpegPictureCallback = new Camera.PictureCallback() {\n    @Override\n    public void onPictureTaken(byte[] data, Camera camera) {\n        mParameters.set(\"RIC_PROC_STITCHING\", \"RicStaticStitching\");\n        mCamera.setParameters(mParameters);\n        mCamera.stopPreview();\n\n        String fileUrl = \"/storage/emulated/0/DCIM/Construction/room01sect01.jpg\";\n        try (FileOutputStream fileOutputStream = new FileOutputStream(fileUrl)) {\n            fileOutputStream.write(data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        mCamera.startPreview();\n    }\n};\n\n\n\nUsing \nadb shell\n, I can log into the camera and make sure that it's saving the file in the correct filename format and directory. On the camera, you can access it in \n/mnt/sdcard/DCIM/Construction/\n\n\n\n\nBack on my workstation, I can copy all the construction images from the camera to my workstation with:\n\n\n$ adb pull /sdcard/DCIM/Construction/\n\n\n\n\n\nIn this test, transferring 13 images took 1.9 seconds using a USB cable. \nThe files total 42 MB. Each image has a resolution of 5376x2896.\n\nOnce I have the image on my workstation, I can then open the image up in a file browser to\nsee it in equirectangular format.\n\n\n\n\n\n\nMy code snippet now looks like this:\n\n\nif (roomNumber \n 9)\n{\n    roomNumberStr = Integer.toString(roomNumber);\n} else {\n    roomNumberStr = \"0\" + Integer.toString(roomNumber);\n\n}\n\n\nString fileUrl = \"/storage/emulated/0/DCIM/Construction/room\" + roomNumberStr + \"sect01.jpg\";\ntry (FileOutputStream fileOutputStream = new FileOutputStream(fileUrl)) {\n    fileOutputStream.write(data);\n    roomNumber = roomNumber + 1;\n\n\n\nIR Controller Concept\n\n\nThis is a concept to control timelapse from a paraglider or other 360 action situation.\n\n\nComponents\n\n\n\n\nFLIRC IR receiver $22\n\n\nUSB OTG adapter (maybe $7 on eBay if user does not already have one?)\n\n\nExisting IR remote you have around the house\n\n\n1/4\" by 20 tpi stud and nut to attach to bracket on paraglider\n\n\n\n\n\n\nAssembly\n\n\n\n\nPrototype Case\n\n\nThis is a prototype neoprene case that holds the components against the stud. Case objectives:\n\n\n\n\nprevent IR receiver from moving in the wind or through action sport movement\n\n\nsecure components to solid base to prevent accidental detachment and loss while in-flight\n\n\neasy removal from camera with velcro tabs\n\n\n\n\n\n\nMounting\n\n\nThe accessory can be mounted on any standard 1/4\" tripod mount or bracket.\n\n\n\n\nMounting the base of the accessory to the bracket will attach both the camera and IR receiver with a solid metal bolt.\n\n\nConfiguring IR Controller\n\n\nThe FLIRC desktop software is used one-time to map the buttons on the IR controller to Android keycodes. The mapping is saved to FLIRC and is retained when power is off.\n\n\n\n\n\n\nConfiguring Camera\n\n\nAs the camera only has basic LEDs to display output, I suggest saving settings ahead of time into the camera with a mobile phone. With the mobile phone or desktop computer, the user can save three different timelapse configurations to the camera prior to the shoot.\n\n\nExample Operation\n\n\nAssuming we keep the operation simple and use only two buttons on the IR controller:\n\n\nUse\n\n\n\n\npress play once to start timelapse\n\n\nflash WiFi LED in magenta to indicate operation. Rate of blinking indicates delay\n\n\npress play again to stop timelapse\n\n\nturn off LED\n\n\n\n\nOn-site configuration\n\n\n\n\npress right arrow to move from default timelapse to longer delay\n\n\nLED blink rate indicates current delay\n\n\npress right arrow again to move to next preset delay, making the delay longer\n\n\npress right arrow again to cycle back to default timelapse delay\n\n\n\n\nCode (Not Implemented)\n\n\nThis is only a concept. I have not attempted to build the plug-in.\n\n\nIR Remote Button Press\n\n\nThe first step is to modify the 'KEYCODE_CAMERA' below to a key from Android using this reference:\nhttps://developer.android.com/reference/android/view/KeyEvent\n\n\nFor example, changing it to 'KEYCODE_T' and checking to see if it can take the keyCode from the IR. I\u2019d like to first plug a normal USB computer keyboard into the THETA with USB OTG and see if I can trigger the shutter by pressing T. Then, I can try the remote.\n\n\npublic void onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n                customShutter(m_is_bracket);\n                if(m_is_bracket){\n                    notificationLedBlink(LedTarget.LED3, LedColor.MAGENTA, 300);\n\n\n\nTaking Picture\n\n\nWe can use the standard RICOH SDK code to take the picture. We just need to set up a variable delay between pictures.\n\n\nintent = new Intent(\"com.theta360.plugin.ACTION_AUDIO_SHUTTER\");\nsendBroadcast(intent);\nmCamera.takePicture(null,null, null, pictureListener);\n\n\n\nLED Indicator\n\n\nWe can use the standard RICOH code to control the feedback from the LED.\n\n\nnotificationLedBlink(LedTarget.LED3, LedColor.MAGENTA, 300);\n\n\n\nPlug-in Concepts from RICOH", 
            "title": "Concept Ideas"
        }, 
        {
            "location": "/concept/#plugin-concepts-from-the-community", 
            "text": "We are constantly working with community members to support \"ideation,\" scoping out possible plug-ins and helping define concepts. Dealing with feature requests and turning those into workable code is a process. Brainstorming, coming up with concepts, sharing them, stress-testing them, and doing this within in the community can move a concept to real code and a finish, sellable product more quickly.", 
            "title": "Plugin Concepts from the Community"
        }, 
        {
            "location": "/concept/#hands-off-action-time-lapse-concept", 
            "text": "Thanks to  Daniel Towersey  from the theta360.guide community for this concept for a \"Hands-Off Action Time-Lapse\" plug-in for the THETA V to be using in paragliding.", 
            "title": "Hands-Off Action Time-Lapse Concept"
        }, 
        {
            "location": "/concept/#description-of-requirements-from-daniel", 
            "text": "We use GoPro for standard photo and video included in our package, and sell 360\u00ba photos as an optional photo package.\nI used an LG 360 cam with I st with the app for interval shooting with the app before take off, and then just needed to press the camera button in flight (on a monopod).\nI changed my LG for the Theta V due to 4k video and much superior seaming of the images, but unfortunately found out that for interval shooting I need to press the button on the app, not the camera, with is a pain\u2026 other pilots use the wired ca-3 remote shutter with is also clumsy\u2026\nCan\u2019t get my head around the fact that the Theta doesn\u2019t have a wireless remote shutter, and the camera button will only take still images even though it is set for interval shooting through the control app\u2026    And there are users waiting to get their hands on an app like this:    Here at our paragliding site alone there must be about 30 to 50 Theta users awaiting such an update, or even better, a wireless remote shutter to substitute the ca-3 cable remote\u2026", 
            "title": "Description of Requirements from Daniel:"
        }, 
        {
            "location": "/concept/#to-build-this-plug-in-heres-a-possible-project-requirements", 
            "text": "Plug-in inside of camera handles timelapse  Shutter button starts/stops timelapse  White LED above shutter button indicates that it is in plug-in mode  Magenta WiFi LED below shutter button flashing indicates that timelapse is activated  Rate of flashing provides a clue as to current setting  Button side button (mode) cycles through pre-set settings  Companion mobile app is used to configure timelapse settings and store them into camera   Some more thoughts from Craig ( @codetricity ) about \npossible alternatives to this project using hardware to trigger the timelapse with WiFi or Bluetooth are  here . \nRight now, it looks like the best way to approach the project with with software only and avoid the need to\nmanufacture or buy a wireless remote. Scroll up to get the full original discussion.  Think you could build this? :-)", 
            "title": "To build this plug-in, here's a possible Project Requirements"
        }, 
        {
            "location": "/concept/#example-construction-concept", 
            "text": "I created a new plugin called  ConstructionPlugin  to\nreduce the time taken to take hundreds of images at construction sites.  The idea is to use a separate application to create a route of rooms.\nThe plugin then saves unique files names for each room.   As a first step, the plugin saves the construction images\nwith a file name prefaced by  construction .   I then created a directory called  Construction  to store\nall my construction pictures for business \nseparately from the normal camera pictures stored in  100RICOH .\nI am using a more scalable naming convention of the form\n  room01sect01.jpg .  In  MainFragment.java , I changed the file save location.  private Camera.PictureCallback mJpegPictureCallback = new Camera.PictureCallback() {\n    @Override\n    public void onPictureTaken(byte[] data, Camera camera) {\n        mParameters.set(\"RIC_PROC_STITCHING\", \"RicStaticStitching\");\n        mCamera.setParameters(mParameters);\n        mCamera.stopPreview();\n\n        String fileUrl = \"/storage/emulated/0/DCIM/Construction/room01sect01.jpg\";\n        try (FileOutputStream fileOutputStream = new FileOutputStream(fileUrl)) {\n            fileOutputStream.write(data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        mCamera.startPreview();\n    }\n};  Using  adb shell , I can log into the camera and make sure that it's saving the file in the correct filename format and directory. On the camera, you can access it in  /mnt/sdcard/DCIM/Construction/   Back on my workstation, I can copy all the construction images from the camera to my workstation with:  $ adb pull /sdcard/DCIM/Construction/   In this test, transferring 13 images took 1.9 seconds using a USB cable. \nThe files total 42 MB. Each image has a resolution of 5376x2896. \nOnce I have the image on my workstation, I can then open the image up in a file browser to\nsee it in equirectangular format.    My code snippet now looks like this:  if (roomNumber   9)\n{\n    roomNumberStr = Integer.toString(roomNumber);\n} else {\n    roomNumberStr = \"0\" + Integer.toString(roomNumber);\n\n}\n\n\nString fileUrl = \"/storage/emulated/0/DCIM/Construction/room\" + roomNumberStr + \"sect01.jpg\";\ntry (FileOutputStream fileOutputStream = new FileOutputStream(fileUrl)) {\n    fileOutputStream.write(data);\n    roomNumber = roomNumber + 1;", 
            "title": "Example Construction Concept"
        }, 
        {
            "location": "/concept/#ir-controller-concept", 
            "text": "This is a concept to control timelapse from a paraglider or other 360 action situation.", 
            "title": "IR Controller Concept"
        }, 
        {
            "location": "/concept/#components", 
            "text": "FLIRC IR receiver $22  USB OTG adapter (maybe $7 on eBay if user does not already have one?)  Existing IR remote you have around the house  1/4\" by 20 tpi stud and nut to attach to bracket on paraglider", 
            "title": "Components"
        }, 
        {
            "location": "/concept/#assembly", 
            "text": "", 
            "title": "Assembly"
        }, 
        {
            "location": "/concept/#prototype-case", 
            "text": "This is a prototype neoprene case that holds the components against the stud. Case objectives:   prevent IR receiver from moving in the wind or through action sport movement  secure components to solid base to prevent accidental detachment and loss while in-flight  easy removal from camera with velcro tabs", 
            "title": "Prototype Case"
        }, 
        {
            "location": "/concept/#mounting", 
            "text": "The accessory can be mounted on any standard 1/4\" tripod mount or bracket.   Mounting the base of the accessory to the bracket will attach both the camera and IR receiver with a solid metal bolt.", 
            "title": "Mounting"
        }, 
        {
            "location": "/concept/#configuring-ir-controller", 
            "text": "The FLIRC desktop software is used one-time to map the buttons on the IR controller to Android keycodes. The mapping is saved to FLIRC and is retained when power is off.", 
            "title": "Configuring IR Controller"
        }, 
        {
            "location": "/concept/#configuring-camera", 
            "text": "As the camera only has basic LEDs to display output, I suggest saving settings ahead of time into the camera with a mobile phone. With the mobile phone or desktop computer, the user can save three different timelapse configurations to the camera prior to the shoot.", 
            "title": "Configuring Camera"
        }, 
        {
            "location": "/concept/#example-operation", 
            "text": "Assuming we keep the operation simple and use only two buttons on the IR controller:", 
            "title": "Example Operation"
        }, 
        {
            "location": "/concept/#use", 
            "text": "press play once to start timelapse  flash WiFi LED in magenta to indicate operation. Rate of blinking indicates delay  press play again to stop timelapse  turn off LED", 
            "title": "Use"
        }, 
        {
            "location": "/concept/#on-site-configuration", 
            "text": "press right arrow to move from default timelapse to longer delay  LED blink rate indicates current delay  press right arrow again to move to next preset delay, making the delay longer  press right arrow again to cycle back to default timelapse delay", 
            "title": "On-site configuration"
        }, 
        {
            "location": "/concept/#code-not-implemented", 
            "text": "This is only a concept. I have not attempted to build the plug-in.", 
            "title": "Code (Not Implemented)"
        }, 
        {
            "location": "/concept/#ir-remote-button-press", 
            "text": "The first step is to modify the 'KEYCODE_CAMERA' below to a key from Android using this reference:\nhttps://developer.android.com/reference/android/view/KeyEvent  For example, changing it to 'KEYCODE_T' and checking to see if it can take the keyCode from the IR. I\u2019d like to first plug a normal USB computer keyboard into the THETA with USB OTG and see if I can trigger the shutter by pressing T. Then, I can try the remote.  public void onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyReceiver.KEYCODE_CAMERA) {\n                customShutter(m_is_bracket);\n                if(m_is_bracket){\n                    notificationLedBlink(LedTarget.LED3, LedColor.MAGENTA, 300);", 
            "title": "IR Remote Button Press"
        }, 
        {
            "location": "/concept/#taking-picture", 
            "text": "We can use the standard RICOH SDK code to take the picture. We just need to set up a variable delay between pictures.  intent = new Intent(\"com.theta360.plugin.ACTION_AUDIO_SHUTTER\");\nsendBroadcast(intent);\nmCamera.takePicture(null,null, null, pictureListener);", 
            "title": "Taking Picture"
        }, 
        {
            "location": "/concept/#led-indicator", 
            "text": "We can use the standard RICOH code to control the feedback from the LED.  notificationLedBlink(LedTarget.LED3, LedColor.MAGENTA, 300);", 
            "title": "LED Indicator"
        }, 
        {
            "location": "/concept/#plug-in-concepts-from-ricoh", 
            "text": "", 
            "title": "Plug-in Concepts from RICOH"
        }, 
        {
            "location": "/community/", 
            "text": "Community\n\n\nThere is a very active and fun community around the RICOH THETA V development. Check out \n\ntheta360.guide\n now.\n\n\ncommunity.theta360.guide\n\n\nThe main hub THETA developer discussion is the independent developer community at \ncommunity.theta360.guide\n. There are more than\na 1,200 registered THETA developers on the community\nsite viewing 70,000 pages a month. You do not need to register to read the content, but it would be great if\nyou signed for free and asked a question or shared some information.\n\n\nWe want to hear from you!\n\n\n\n\n\n\nHow to Ask a Question\n\n\nPublic Question\n\n\nGo to the \nTHETA API Usage conference\n.\n\n\nClick on New Topic.\n\n\n\n\nWrite the title of your question and the details in the body.\n\n\n\n\nIf you are new to the community, your question will need to get approved for the first post only.\n\n\nPrivate Question\n\n\nYou can message us directly on \ncommunity.theta360.guide\n. Or you can send email to jcasman@oppkey.com.\n\n\nEvents, Meetups and Workshops\n\n\nA number of workshops are planned to cover different aspects of plug-in development. We also hold physical and online meetings to explore the booming business around applications for 360 cameras. Here are some of the upcoming events for developers:\n\n\n\n\nSIGGRAPH (Aug 12-16, Vancouver, BC)\n\n\nPlug-in Technical Workshop (Aug 30, San Francisco, CA)\n\n\nTechCrunch DISRUPT (Sept 5-7, San Francisco, CA)\n\n\nNYVR (Oct 25-27, New York, NY)\n\n\n\n\n\n\nThe \nRICOH THETA Developers SF Bay Area Meetup Group\n is the \nmost active.\n\n\nMarketing and Sales Questions\n\n\nIf you have questions about marketing and selling your application, Jesse Casman can relay your question to the appropriate people at Ricoh.  He can also help you get your app onto the THETA Plug-in store and provide \ninformation on the process to get your plug-in showcased as a featured app.", 
            "title": "Community"
        }, 
        {
            "location": "/community/#community", 
            "text": "There is a very active and fun community around the RICOH THETA V development. Check out  theta360.guide  now.", 
            "title": "Community"
        }, 
        {
            "location": "/community/#communitytheta360guide", 
            "text": "The main hub THETA developer discussion is the independent developer community at  community.theta360.guide . There are more than\na 1,200 registered THETA developers on the community\nsite viewing 70,000 pages a month. You do not need to register to read the content, but it would be great if\nyou signed for free and asked a question or shared some information.  We want to hear from you!", 
            "title": "community.theta360.guide"
        }, 
        {
            "location": "/community/#how-to-ask-a-question", 
            "text": "", 
            "title": "How to Ask a Question"
        }, 
        {
            "location": "/community/#public-question", 
            "text": "Go to the  THETA API Usage conference .  Click on New Topic.   Write the title of your question and the details in the body.   If you are new to the community, your question will need to get approved for the first post only.", 
            "title": "Public Question"
        }, 
        {
            "location": "/community/#private-question", 
            "text": "You can message us directly on  community.theta360.guide . Or you can send email to jcasman@oppkey.com.", 
            "title": "Private Question"
        }, 
        {
            "location": "/community/#events-meetups-and-workshops", 
            "text": "A number of workshops are planned to cover different aspects of plug-in development. We also hold physical and online meetings to explore the booming business around applications for 360 cameras. Here are some of the upcoming events for developers:   SIGGRAPH (Aug 12-16, Vancouver, BC)  Plug-in Technical Workshop (Aug 30, San Francisco, CA)  TechCrunch DISRUPT (Sept 5-7, San Francisco, CA)  NYVR (Oct 25-27, New York, NY)    The  RICOH THETA Developers SF Bay Area Meetup Group  is the \nmost active.", 
            "title": "Events, Meetups and Workshops"
        }, 
        {
            "location": "/community/#marketing-and-sales-questions", 
            "text": "If you have questions about marketing and selling your application, Jesse Casman can relay your question to the appropriate people at Ricoh.  He can also help you get your app onto the THETA Plug-in store and provide \ninformation on the process to get your plug-in showcased as a featured app.", 
            "title": "Marketing and Sales Questions"
        }, 
        {
            "location": "/about/", 
            "text": "About The Plug-in Community Guide\n\n\nThis document started as an internal document that Craig Oda wrote \nto help Jesse Casman with meetings at CES 2018 in Las Vegas.  Craig\nand Jesse found \nout that Ricoh was planning to announce a radical, new strategy for \n360 cameras. In January of 2018, Ricoh announced plans to open \nup the internal Android operating system\nto external developers.\n\n\nWe immediately saw the potential to change how people approached VR \nand AR.  \n\n\nAt CES, we gained access to unlocked THETA V cameras under the\nclosed beta program that Ricoh offered developers. As we worked\nwith the community on building applications, this document grew.\n\n\n\n\nCraig\n\n\nAfter growing up in the US, I started my career in Tokyo, where I was part of the\ncore team that developed the first public-access Internet system in Asia.\nI co-founded the Tokyo Linux Users Group, served as first president, and co-authored a book\nfor O'Reilly Japan on adding Japanese language support to Linux. After selling my Internet business\nto a large US firm, I moved to the US to start the US office of a Linux company and helped\nto raise $96M in venture funding. I stayed in Palo Alto and continue to work with cool\ntechnology companies changing the world.\n\n\nVR is not new, but the business opportunities for VR are new, enabled by cheaper and\nbetter technology. Although there's buzz about the entertainment potential of VR, the main\nopportunity may be in how people communicate large amounts of visual and auditory data\nwith each other. We are overwhelmed by media. We need interactive ways\nto assess and focus in on the details that are meaningful. 360 media offers a way to\ncapture and work with large amounts of information. Join us as we navigate, define, and build\nthis new paradigm.\n\n\n\n\nJesse\n\n\nHello from San Francisco! This is Jesse (jcasman@oppkey.com), I've been working with Craig on the theta360.guide since 2015. We build projects and tutorials, connect with developers like you, and try to have a good time while we're doing it. Part of that is building usable documentation like this THETA V Plugin Development Community Guide! The Guide is constantly being updated as we test more and learn more. If you notice something that could be fixed or added, we'd love to hear from you. It's a community effort! The RICOH THETA is an extremely cool platform for development, with potential in so many different industries. If you're doing something in 360, let us know, and maybe consider adding it here to help out others.", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-the-plug-in-community-guide", 
            "text": "This document started as an internal document that Craig Oda wrote \nto help Jesse Casman with meetings at CES 2018 in Las Vegas.  Craig\nand Jesse found \nout that Ricoh was planning to announce a radical, new strategy for \n360 cameras. In January of 2018, Ricoh announced plans to open \nup the internal Android operating system\nto external developers.  We immediately saw the potential to change how people approached VR \nand AR.    At CES, we gained access to unlocked THETA V cameras under the\nclosed beta program that Ricoh offered developers. As we worked\nwith the community on building applications, this document grew.", 
            "title": "About The Plug-in Community Guide"
        }, 
        {
            "location": "/about/#craig", 
            "text": "After growing up in the US, I started my career in Tokyo, where I was part of the\ncore team that developed the first public-access Internet system in Asia.\nI co-founded the Tokyo Linux Users Group, served as first president, and co-authored a book\nfor O'Reilly Japan on adding Japanese language support to Linux. After selling my Internet business\nto a large US firm, I moved to the US to start the US office of a Linux company and helped\nto raise $96M in venture funding. I stayed in Palo Alto and continue to work with cool\ntechnology companies changing the world.  VR is not new, but the business opportunities for VR are new, enabled by cheaper and\nbetter technology. Although there's buzz about the entertainment potential of VR, the main\nopportunity may be in how people communicate large amounts of visual and auditory data\nwith each other. We are overwhelmed by media. We need interactive ways\nto assess and focus in on the details that are meaningful. 360 media offers a way to\ncapture and work with large amounts of information. Join us as we navigate, define, and build\nthis new paradigm.", 
            "title": "Craig"
        }, 
        {
            "location": "/about/#jesse", 
            "text": "Hello from San Francisco! This is Jesse (jcasman@oppkey.com), I've been working with Craig on the theta360.guide since 2015. We build projects and tutorials, connect with developers like you, and try to have a good time while we're doing it. Part of that is building usable documentation like this THETA V Plugin Development Community Guide! The Guide is constantly being updated as we test more and learn more. If you notice something that could be fixed or added, we'd love to hear from you. It's a community effort! The RICOH THETA is an extremely cool platform for development, with potential in so many different industries. If you're doing something in 360, let us know, and maybe consider adding it here to help out others.", 
            "title": "Jesse"
        }
    ]
}